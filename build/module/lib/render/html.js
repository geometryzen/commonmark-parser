import * as tslib_1 from "tslib";
import { Renderer } from './renderer';
import { escapeXml as esc } from '../common';
var reUnsafeProtocol = /^javascript:|vbscript:|file:|data:/i;
var reSafeDataProtocol = /^data:image\/(?:png|gif|jpeg|webp)/i;
var potentiallyUnsafe = function (url) {
    return reUnsafeProtocol.test(url) && !reSafeDataProtocol.test(url);
};
var HtmlRenderer = (function (_super) {
    tslib_1.__extends(HtmlRenderer, _super);
    function HtmlRenderer(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.options = options;
        // by default, soft breaks are rendered as newlines in HTML
        options.softbreak = options.softbreak || '\n';
        // set to "<br />" to make them hard breaks
        // set to " " if you want to ignore line wrapping in source
        _this.disableTags = 0;
        _this.lastOut = "\n";
        _this.options = options;
        return _this;
    }
    // Helper function to produce an HTML tag.
    HtmlRenderer.prototype.tag = function (name, attrs, selfclosing) {
        if (this.disableTags > 0) {
            return;
        }
        this.buffer += ('<' + name);
        if (attrs && attrs.length > 0) {
            var i = 0;
            var attrib = void 0;
            while ((attrib = attrs[i]) !== undefined) {
                this.buffer += (' ' + attrib[0] + '="' + attrib[1] + '"');
                i++;
            }
        }
        if (selfclosing) {
            this.buffer += ' /';
        }
        this.buffer += '>';
        this.lastOut = '>';
    };
    /* Node methods */
    HtmlRenderer.prototype.document = function (node, entering) {
        // Do nothing.
    };
    HtmlRenderer.prototype.text = function (node) {
        this.out(node.literal);
    };
    HtmlRenderer.prototype.softbreak = function () {
        this.lit(this.options.softbreak);
    };
    HtmlRenderer.prototype.linebreak = function () {
        this.tag('br', [], true);
        this.cr();
    };
    HtmlRenderer.prototype.link = function (node, entering) {
        var attrs = this.attrs(node);
        if (entering) {
            if (!(this.options.safe && potentiallyUnsafe(node.destination))) {
                attrs.push(['href', esc(node.destination, true)]);
            }
            if (node.title) {
                attrs.push(['title', esc(node.title, true)]);
            }
            this.tag('a', attrs);
        }
        else {
            this.tag('/a');
        }
    };
    HtmlRenderer.prototype.image = function (node, entering) {
        if (entering) {
            if (this.disableTags === 0) {
                if (this.options.safe &&
                    potentiallyUnsafe(node.destination)) {
                    this.lit('<img src="" alt="');
                }
                else {
                    this.lit('<img src="' + esc(node.destination, true) +
                        '" alt="');
                }
            }
            this.disableTags += 1;
        }
        else {
            this.disableTags -= 1;
            if (this.disableTags === 0) {
                if (node.title) {
                    this.lit('" title="' + esc(node.title, true));
                }
                this.lit('" />');
            }
        }
    };
    HtmlRenderer.prototype.emph = function (node, entering) {
        this.tag(entering ? 'em' : '/em');
    };
    HtmlRenderer.prototype.strong = function (node, entering) {
        this.tag(entering ? 'strong' : '/strong');
    };
    HtmlRenderer.prototype.paragraph = function (node, entering) {
        var attrs = this.attrs(node);
        if (node.parent) {
            var grandparent = node.parent.parent;
            if (grandparent !== null &&
                grandparent.type === 'list') {
                if (grandparent.listTight) {
                    return;
                }
            }
        }
        if (entering) {
            this.cr();
            this.tag('p', attrs);
        }
        else {
            this.tag('/p');
            this.cr();
        }
    };
    HtmlRenderer.prototype.heading = function (node, entering) {
        var tagname = 'h' + node.level;
        var attrs = this.attrs(node);
        if (entering) {
            this.cr();
            this.tag(tagname, attrs);
        }
        else {
            this.tag('/' + tagname);
            this.cr();
        }
    };
    HtmlRenderer.prototype.code = function (node) {
        this.tag('code');
        this.out(node.literal);
        this.tag('/code');
    };
    HtmlRenderer.prototype.code_block = function (node) {
        var info_words = node.info ? node.info.split(/\s+/) : [];
        var attrs = this.attrs(node);
        if (info_words.length > 0 && info_words[0].length > 0) {
            attrs.push(['class', 'language-' + esc(info_words[0], true)]);
        }
        this.cr();
        this.tag('pre');
        this.tag('code', attrs);
        this.out(node.literal);
        this.tag('/code');
        this.tag('/pre');
        this.cr();
    };
    HtmlRenderer.prototype.thematic_break = function (node) {
        var attrs = this.attrs(node);
        this.cr();
        this.tag('hr', attrs, true);
        this.cr();
    };
    HtmlRenderer.prototype.block_quote = function (node, entering) {
        var attrs = this.attrs(node);
        if (entering) {
            this.cr();
            this.tag('blockquote', attrs);
            this.cr();
        }
        else {
            this.cr();
            this.tag('/blockquote');
            this.cr();
        }
    };
    HtmlRenderer.prototype.list = function (node, entering) {
        var tagname = node.listType === 'bullet' ? 'ul' : 'ol';
        var attrs = this.attrs(node);
        if (entering) {
            var start = node.listStart;
            if (start !== null && start !== 1) {
                attrs.push(['start', start.toString()]);
            }
            this.cr();
            this.tag(tagname, attrs);
            this.cr();
        }
        else {
            this.cr();
            this.tag('/' + tagname);
            this.cr();
        }
    };
    HtmlRenderer.prototype.item = function (node, entering) {
        var attrs = this.attrs(node);
        if (entering) {
            this.tag('li', attrs);
        }
        else {
            this.tag('/li');
            this.cr();
        }
    };
    HtmlRenderer.prototype.html_inline = function (node) {
        if (this.options.safe) {
            this.lit('<!-- raw HTML omitted -->');
        }
        else {
            this.lit(node.literal);
        }
    };
    HtmlRenderer.prototype.html_block = function (node) {
        this.cr();
        if (this.options.safe) {
            this.lit('<!-- raw HTML omitted -->');
        }
        else {
            this.lit(node.literal);
        }
        this.cr();
    };
    HtmlRenderer.prototype.custom_inline = function (node, entering) {
        if (entering && node.onEnter) {
            this.lit(node.onEnter);
        }
        else if (!entering && node.onExit) {
            this.lit(node.onExit);
        }
    };
    HtmlRenderer.prototype.custom_block = function (node, entering) {
        this.cr();
        if (entering && node.onEnter) {
            this.lit(node.onEnter);
        }
        else if (!entering && node.onExit) {
            this.lit(node.onExit);
        }
        this.cr();
    };
    /* Helper methods */
    HtmlRenderer.prototype.out = function (s) {
        this.lit(esc(s, false));
    };
    HtmlRenderer.prototype.attrs = function (node) {
        var att = [];
        if (this.options.sourcepos) {
            var pos = node.sourcepos;
            if (pos) {
                att.push(['data-sourcepos', String(pos[0][0]) + ':' +
                        String(pos[0][1]) + '-' + String(pos[1][0]) + ':' +
                        String(pos[1][1])]);
            }
        }
        return att;
    };
    return HtmlRenderer;
}(Renderer));
export { HtmlRenderer };
//# sourceMappingURL=data:application/json;base64,