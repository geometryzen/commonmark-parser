{"version":3,"file":"index.js","sources":["../../src/lib/blocks.ts","../../src/lib/inlines.ts","../../src/lib/normalize-reference.ts","../../src/lib/common.ts","../../src/lib/entities.ts","../../src/lib/decode.ts","../../src/lib/encode.ts","../../src/lib/node.ts"],"sourcesContent":["import { Node, ListData } from './node';\n\nimport { OPENTAG, CLOSETAG, unescapeString } from './common';\n\nconst CODE_INDENT = 4;\n\nconst C_TAB = 9;\nconst C_NEWLINE = 10;\nconst C_GREATERTHAN = 62;\nconst C_LESSTHAN = 60;\nconst C_SPACE = 32;\nconst C_OPEN_BRACKET = 91;\n\nimport { InlineParser, Reference } from './inlines';\n\nconst reHtmlBlockOpen = [\n    /./, // dummy for 0\n    /^<(?:script|pre|style)(?:\\s|>|$)/i,\n    /^<!--/,\n    /^<[?]/,\n    /^<![A-Z]/,\n    /^<!\\[CDATA\\[/,\n    /^<[/]?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[123456]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|title|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|[/]?[>]|$)/i,\n    new RegExp('^(?:' + OPENTAG + '|' + CLOSETAG + ')\\\\s*$', 'i')\n];\n\nconst reHtmlBlockClose = [\n    /./, // dummy for 0\n    /<\\/(?:script|pre|style)>/i,\n    /-->/,\n    /\\?>/,\n    />/,\n    /\\]\\]>/\n];\n\nconst reThematicBreak = /^(?:(?:\\*[ \\t]*){3,}|(?:_[ \\t]*){3,}|(?:-[ \\t]*){3,})[ \\t]*$/;\n\nconst reMaybeSpecial = /^[#`~*+_=<>0-9-]/;\n\nconst reNonSpace = /[^ \\t\\f\\v\\r\\n]/;\n\nconst reBulletListMarker = /^[*+-]/;\n\nconst reOrderedListMarker = /^(\\d{1,9})([.)])/;\n\nconst reATXHeadingMarker = /^#{1,6}(?:[ \\t]+|$)/;\n\nconst reCodeFence = /^`{3,}(?!.*`)|^~{3,}(?!.*~)/;\n\nconst reClosingCodeFence = /^(?:`{3,}|~{3,})(?= *$)/;\n\nconst reSetextHeadingLine = /^(?:=+|-+)[ \\t]*$/;\n\nconst reLineEnding = /\\r\\n|\\n|\\r/;\n\n// Returns true if string contains only space characters.\nconst isBlank = function (s: string) {\n    return !(reNonSpace.test(s));\n};\n\nconst isSpaceOrTab = function (c: number) {\n    return c === C_SPACE || c === C_TAB;\n};\n\nconst peek = function (ln: string, pos: number) {\n    if (pos < ln.length) {\n        return ln.charCodeAt(pos);\n    } else {\n        return -1;\n    }\n};\n\n// DOC PARSER\n\n// These are methods of a Parser object, defined below.\n\n// Returns true if block ends with a blank line, descending if needed\n// into lists and sublists.\nconst endsWithBlankLine = function (block: Node) {\n    while (block) {\n        if (block._lastLineBlank) {\n            return true;\n        }\n        const t = block.type;\n        if (t === 'list' || t === 'item') {\n            block = block.lastChild;\n        } else {\n            break;\n        }\n    }\n    return false;\n};\n\n// Parse a list marker and return data on the marker (type,\n// start, delimiter, bullet character, padding) or null.\nconst parseListMarker = function (parser: Parser, container: Node) {\n    const rest = parser.currentLine.slice(parser.nextNonspace);\n    let match: RegExpMatchArray;\n    // var nextc;\n    // var spacesStartCol;\n    // var spacesStartOffset;\n    const data: ListData = {\n        type: null,\n        tight: true,  // lists are tight by default\n        bulletChar: null,\n        start: null,\n        delimiter: null,\n        padding: null,\n        markerOffset: parser.indent\n    };\n    if ((match = rest.match(reBulletListMarker))) {\n        data.type = 'bullet';\n        data.bulletChar = match[0][0];\n\n    }\n    else if ((match = rest.match(reOrderedListMarker)) && (container.type !== 'paragraph' || match[1] === '1')) {\n        data.type = 'ordered';\n        data.start = parseInt(match[1]);\n        data.delimiter = match[2];\n    }\n    else {\n        return null;\n    }\n    // make sure we have spaces after\n    let nextc = peek(parser.currentLine, parser.nextNonspace + match[0].length);\n    if (!(nextc === -1 || nextc === C_TAB || nextc === C_SPACE)) {\n        return null;\n    }\n\n    // if it interrupts paragraph, make sure first line isn't blank\n    if (container.type === 'paragraph' && !parser.currentLine.slice(parser.nextNonspace + match[0].length).match(reNonSpace)) {\n        return null;\n    }\n\n    // we've got a match! advance offset and calculate padding\n    parser.advanceNextNonspace(); // to start of marker\n    parser.advanceOffset(match[0].length, true); // to end of marker\n    const spacesStartCol = parser.column;\n    const spacesStartOffset = parser.offset;\n    do {\n        parser.advanceOffset(1, true);\n        nextc = peek(parser.currentLine, parser.offset);\n    } while (parser.column - spacesStartCol < 5 &&\n        isSpaceOrTab(nextc));\n    const blank_item = peek(parser.currentLine, parser.offset) === -1;\n    const spaces_after_marker = parser.column - spacesStartCol;\n    if (spaces_after_marker >= 5 ||\n        spaces_after_marker < 1 ||\n        blank_item) {\n        data.padding = match[0].length + 1;\n        parser.column = spacesStartCol;\n        parser.offset = spacesStartOffset;\n        if (isSpaceOrTab(peek(parser.currentLine, parser.offset))) {\n            parser.advanceOffset(1, true);\n        }\n    } else {\n        data.padding = match[0].length + spaces_after_marker;\n    }\n    return data;\n};\n\n// Returns true if the two list items are of the same type,\n// with the same delimiter and bullet character.  This is used\n// in agglomerating list items into lists.\nconst listsMatch = function (list_data: ListData, item_data: ListData) {\n    return (list_data.type === item_data.type &&\n        list_data.delimiter === item_data.delimiter &&\n        list_data.bulletChar === item_data.bulletChar);\n};\n\n// 'finalize' is run when the block is closed.\n// 'continue' is run to check whether the block is continuing\n// at a certain line and offset (e.g. whether a block quote\n// contains a `>`.  It returns 0 for matched, 1 for not matched,\n// and 2 for \"we've dealt with this line completely, go to next.\"\ninterface Block {\n    continue(parser: Parser, container: Node): number;\n    finalize(parser: Parser, block: Node): void;\n    canContain(t: string): boolean;\n    acceptsLines: boolean;\n}\n\n/**\n * The types are node types\n */\nconst blocks: { [type: string]: Block } = {\n    'document': {\n        continue: function () { return 0; },\n        finalize: function (parser: Parser, block: Node) { return; },\n        canContain: function (t) { return (t !== 'item'); },\n        acceptsLines: false\n    },\n    'list': {\n        continue: function () { return 0; },\n        finalize: function (parser: Parser, block: Node) {\n            let item = block.firstChild;\n            while (item) {\n                // check for non-final list item ending with blank line:\n                if (endsWithBlankLine(item) && item.next) {\n                    block.listTight = false;\n                    break;\n                }\n                // recurse into children of list item, to see if there are\n                // spaces between any of them:\n                let subitem = item.firstChild;\n                while (subitem) {\n                    if (endsWithBlankLine(subitem) &&\n                        (item.next || subitem.next)) {\n                        block.listTight = false;\n                        break;\n                    }\n                    subitem = subitem.next;\n                }\n                item = item.next;\n            }\n        },\n        canContain: function (t) { return (t === 'item'); },\n        acceptsLines: false\n    },\n    'block_quote': {\n        continue: function (parser: Parser) {\n            const ln = parser.currentLine;\n            if (!parser.indented &&\n                peek(ln, parser.nextNonspace) === C_GREATERTHAN) {\n                parser.advanceNextNonspace();\n                parser.advanceOffset(1, false);\n                if (isSpaceOrTab(peek(ln, parser.offset))) {\n                    parser.advanceOffset(1, true);\n                }\n            } else {\n                return 1;\n            }\n            return 0;\n        },\n        finalize: function (parser: Parser, block: Node) { return; },\n        canContain: function (t) { return (t !== 'item'); },\n        acceptsLines: false\n    },\n    'item': {\n        continue: function (parser, container) {\n            if (parser.blank) {\n                if (container.firstChild == null) {\n                    // Blank line after empty list item\n                    return 1;\n                } else {\n                    parser.advanceNextNonspace();\n                }\n            } else if (parser.indent >=\n                container.listData.markerOffset +\n                container.listData.padding) {\n                parser.advanceOffset(container.listData.markerOffset +\n                    container.listData.padding, true);\n            } else {\n                return 1;\n            }\n            return 0;\n        },\n        finalize: function (parser: Parser, block: Node) { return; },\n        canContain: function (t) { return (t !== 'item'); },\n        acceptsLines: false\n    },\n    'heading': {\n        continue: function () {\n            // a heading can never container > 1 line, so fail to match:\n            return 1;\n        },\n        finalize: function (parser: Parser, block: Node) { return; },\n        canContain: function () { return false; },\n        acceptsLines: false\n    },\n    'thematic_break': {\n        continue: function () {\n            // a thematic break can never container > 1 line, so fail to match:\n            return 1;\n        },\n        finalize: function () { return; },\n        canContain: function () { return false; },\n        acceptsLines: false\n    },\n    'code_block': {\n        continue: function (parser: Parser, container: Node) {\n            const ln = parser.currentLine;\n            const indent = parser.indent;\n            if (container.isFenced) { // fenced\n                const match = (indent <= 3 &&\n                    ln.charAt(parser.nextNonspace) === container.fenceChar &&\n                    ln.slice(parser.nextNonspace).match(reClosingCodeFence));\n                if (match && match[0].length >= container.fenceLength) {\n                    // closing fence - we're at end of line, so we can return\n                    parser.finalize(container, parser.lineNumber);\n                    return 2;\n                }\n                else {\n                    // skip optional spaces of fence offset\n                    let i = container.fenceOffset;\n                    while (i > 0 && isSpaceOrTab(peek(ln, parser.offset))) {\n                        parser.advanceOffset(1, true);\n                        i--;\n                    }\n                }\n            } else { // indented\n                if (indent >= CODE_INDENT) {\n                    parser.advanceOffset(CODE_INDENT, true);\n                } else if (parser.blank) {\n                    parser.advanceNextNonspace();\n                } else {\n                    return 1;\n                }\n            }\n            return 0;\n        },\n        finalize: function (parser: Parser, block: Node) {\n            if (block.isFenced) { // fenced\n                // first line becomes info string\n                const content = block._string_content;\n                const newlinePos = content.indexOf('\\n');\n                const firstLine = content.slice(0, newlinePos);\n                const rest = content.slice(newlinePos + 1);\n                block.info = unescapeString(firstLine.trim());\n                block.literal = rest;\n            } else { // indented\n                block.literal = block._string_content.replace(/(\\n *)+$/, '\\n');\n            }\n            block._string_content = null; // allow GC\n        },\n        canContain: function () { return false; },\n        acceptsLines: true\n    },\n    'html_block': {\n        continue: function (parser: Parser, container: Node) {\n            return ((parser.blank && (container.htmlBlockType === 6 || container.htmlBlockType === 7)) ? 1 : 0);\n        },\n        finalize: function (parser: Parser, block: Node) {\n            block.literal = block._string_content.replace(/(\\n *)+$/, '');\n            block._string_content = null; // allow GC\n        },\n        canContain: function () { return false; },\n        acceptsLines: true\n    },\n    'paragraph': {\n        continue: function (parser) {\n            return (parser.blank ? 1 : 0);\n        },\n        finalize: function (parser: Parser, block: Node) {\n            let pos: number;\n            let hasReferenceDefs = false;\n\n            // try parsing the beginning as link reference definitions:\n            while (peek(block._string_content, 0) === C_OPEN_BRACKET &&\n                (pos = parser.inlineParser.parseReference(block._string_content, parser.refmap))) {\n                block._string_content = block._string_content.slice(pos);\n                hasReferenceDefs = true;\n            }\n            if (hasReferenceDefs && isBlank(block._string_content)) {\n                block.unlink();\n            }\n        },\n        canContain: function () { return false; },\n        acceptsLines: true\n    }\n};\n\ninterface BlockStart {\n    (parser: Parser, container: Node): number;\n}\n\n// block start functions.  Return values:\n// 0 = no match\n// 1 = matched container, keep going\n// 2 = matched leaf, no more block starts\nconst blockStarts: BlockStart[] = [\n    // block quote\n    function (parser: Parser, unused: Node) {\n        if (!parser.indented &&\n            peek(parser.currentLine, parser.nextNonspace) === C_GREATERTHAN) {\n            parser.advanceNextNonspace();\n            parser.advanceOffset(1, false);\n            // optional following space\n            if (isSpaceOrTab(peek(parser.currentLine, parser.offset))) {\n                parser.advanceOffset(1, true);\n            }\n            parser.closeUnmatchedBlocks();\n            parser.addChild('block_quote', parser.nextNonspace);\n            return 1;\n        } else {\n            return 0;\n        }\n    },\n\n    // ATX heading\n    function (parser: Parser, unused: Node) {\n        let match: RegExpMatchArray;\n        if (!parser.indented &&\n            (match = parser.currentLine.slice(parser.nextNonspace).match(reATXHeadingMarker))) {\n            parser.advanceNextNonspace();\n            parser.advanceOffset(match[0].length, false);\n            parser.closeUnmatchedBlocks();\n            const container = parser.addChild('heading', parser.nextNonspace);\n            container.level = match[0].trim().length; // number of #s\n            // remove trailing ###s:\n            container._string_content =\n                parser.currentLine.slice(parser.offset).replace(/^ *#+ *$/, '').replace(/ +#+ *$/, '');\n            parser.advanceOffset(parser.currentLine.length - parser.offset);\n            return 2;\n        }\n        else {\n            return 0;\n        }\n    },\n\n    // Fenced code block\n    function (parser: Parser, unused: Node) {\n        let match: RegExpMatchArray;\n        if (!parser.indented &&\n            (match = parser.currentLine.slice(parser.nextNonspace).match(reCodeFence))) {\n            const fenceLength = match[0].length;\n            parser.closeUnmatchedBlocks();\n            const container = parser.addChild('code_block', parser.nextNonspace);\n            container.isFenced = true;\n            container.fenceLength = fenceLength;\n            container.fenceChar = match[0][0];\n            container.fenceOffset = parser.indent;\n            parser.advanceNextNonspace();\n            parser.advanceOffset(fenceLength, false);\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // HTML block\n    function (parser: Parser, container: Node) {\n        if (!parser.indented &&\n            peek(parser.currentLine, parser.nextNonspace) === C_LESSTHAN) {\n            const s = parser.currentLine.slice(parser.nextNonspace);\n            let blockType: number;\n\n            for (blockType = 1; blockType <= 7; blockType++) {\n                if (reHtmlBlockOpen[blockType].test(s) &&\n                    (blockType < 7 ||\n                        container.type !== 'paragraph')) {\n                    parser.closeUnmatchedBlocks();\n                    // We don't adjust parser.offset;\n                    // spaces are part of the HTML block:\n                    const b = parser.addChild('html_block', parser.offset);\n                    b.htmlBlockType = blockType;\n                    return 2;\n                }\n            }\n        }\n\n        return 0;\n\n    },\n\n    // Setext heading\n    function (parser: Parser, container: Node) {\n        let match: RegExpMatchArray;\n        if (!parser.indented &&\n            container.type === 'paragraph' &&\n            ((match = parser.currentLine.slice(parser.nextNonspace).match(reSetextHeadingLine)))) {\n            parser.closeUnmatchedBlocks();\n            const heading = new Node('heading', container.sourcepos);\n            heading.level = match[0][0] === '=' ? 1 : 2;\n            heading._string_content = container._string_content;\n            container.insertAfter(heading);\n            container.unlink();\n            parser.tip = heading;\n            parser.advanceOffset(parser.currentLine.length - parser.offset, false);\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // thematic break\n    function (parser: Parser) {\n        if (!parser.indented &&\n            reThematicBreak.test(parser.currentLine.slice(parser.nextNonspace))) {\n            parser.closeUnmatchedBlocks();\n            parser.addChild('thematic_break', parser.nextNonspace);\n            parser.advanceOffset(parser.currentLine.length - parser.offset, false);\n            return 2;\n        }\n        else {\n            return 0;\n        }\n    },\n\n    // list item\n    function (parser: Parser, container: Node) {\n        let data: ListData;\n\n        if ((!parser.indented || container.type === 'list')\n            && (data = parseListMarker(parser, container))) {\n            parser.closeUnmatchedBlocks();\n\n            // add the list if needed\n            if (parser.tip.type !== 'list' ||\n                !(listsMatch(container.listData, data))) {\n                container = parser.addChild('list', parser.nextNonspace);\n                container.listData = data;\n            }\n\n            // add the list item\n            container = parser.addChild('item', parser.nextNonspace);\n            container.listData = data;\n            return 1;\n        } else {\n            return 0;\n        }\n    },\n\n    // indented code block\n    function (parser: Parser) {\n        if (parser.indented &&\n            parser.tip.type !== 'paragraph' &&\n            !parser.blank) {\n            // indented code\n            parser.advanceOffset(CODE_INDENT, true);\n            parser.closeUnmatchedBlocks();\n            parser.addChild('code_block', parser.offset);\n            return 2;\n        }\n        else {\n            return 0;\n        }\n    }\n\n];\n\nexport interface ParserOptions {\n    smart?: boolean;\n    time?: boolean;\n}\n\n\nexport class Parser {\n    doc: Node;\n    tip: Node;\n    oldtip: Node;\n    inlineParser: InlineParser;\n    options: ParserOptions;\n    lineNumber: number;\n    lastLineLength: number;\n    offset: number;\n    column: number;\n    lastMatchedContainer: Node;\n    currentLine: string;\n    refmap: { [label: string]: Reference };\n    blank: boolean;\n    private readonly blocks: { [type: string]: Block };\n    private readonly blockStarts: BlockStart[];\n    partiallyConsumedTab: boolean;\n    allClosed: boolean;\n    indent: number;\n    indented: any;\n    nextNonspace: number;\n    nextNonspaceColumn: number;\n    constructor(options: ParserOptions = {}) {\n        this.inlineParser = new InlineParser(options);\n        this.options = options;\n        this.blocks = blocks;\n        this.blockStarts = blockStarts;\n    }\n    // The main parsing function.  Returns a parsed document AST.\n    parse(input: string): Node {\n        this.doc = new Node('document', [[1, 1], [0, 0]]);\n        this.tip = this.doc;\n        this.refmap = {};\n        this.lineNumber = 0;\n        this.lastLineLength = 0;\n        this.offset = 0;\n        this.column = 0;\n        this.lastMatchedContainer = this.doc;\n        this.currentLine = \"\";\n        // if (this.options.time) { console.time(\"preparing input\"); }\n        const lines = input.split(reLineEnding);\n        let len = lines.length;\n        if (input.charCodeAt(input.length - 1) === C_NEWLINE) {\n            // ignore last blank line created by final newline\n            len -= 1;\n        }\n        // if (this.options.time) { console.timeEnd(\"preparing input\"); }\n        // if (this.options.time) { console.time(\"block parsing\"); }\n        for (let i = 0; i < len; i++) {\n            this.incorporateLine(lines[i]);\n        }\n        while (this.tip) {\n            this.finalize(this.tip, len);\n        }\n        // if (this.options.time) { console.timeEnd(\"block parsing\"); }\n        // if (this.options.time) { console.time(\"inline parsing\"); }\n        this.processInlines(this.doc);\n        // if (this.options.time) { console.timeEnd(\"inline parsing\"); }\n        return this.doc;\n    }\n\n    // Analyze a line of text and update the document appropriately.\n    // We parse markdown text by calling this on each line of input,\n    // then finalizing the document.\n    incorporateLine(ln: string) {\n        let all_matched = true;\n        // var t;\n\n        let container = this.doc;\n        this.oldtip = this.tip;\n        this.offset = 0;\n        this.column = 0;\n        this.blank = false;\n        this.partiallyConsumedTab = false;\n        this.lineNumber += 1;\n\n        // replace NUL characters for security\n        if (ln.indexOf('\\u0000') !== -1) {\n            ln = ln.replace(/\\0/g, '\\uFFFD');\n        }\n\n        this.currentLine = ln;\n\n        // For each containing block, try to parse the associated line start.\n        // Bail out on failure: container will point to the last matching block.\n        // Set all_matched to false if not all containers match.\n        let lastChild: Node;\n        while ((lastChild = container.lastChild) && lastChild.open) {\n            container = lastChild;\n\n            this.findNextNonspace();\n\n            switch (this.blocks[container.type].continue(this, container)) {\n                case 0: // we've matched, keep going\n                    break;\n                case 1: // we've failed to match a block\n                    all_matched = false;\n                    break;\n                case 2: // we've hit end of line for fenced code close and can return\n                    this.lastLineLength = ln.length;\n                    return;\n                default:\n                    throw 'continue returned illegal value, must be 0, 1, or 2';\n            }\n            if (!all_matched) {\n                container = container.parent; // back up to last matching block\n                break;\n            }\n        }\n\n        this.allClosed = (container === this.oldtip);\n        this.lastMatchedContainer = container;\n\n        let matchedLeaf = container.type !== 'paragraph' && blocks[container.type].acceptsLines;\n        const starts = this.blockStarts;\n        const startsLen = starts.length;\n        // Unless last matched container is a code block, try new container starts,\n        // adding children to the last matched container:\n        while (!matchedLeaf) {\n\n            this.findNextNonspace();\n\n            // this is a little performance optimization:\n            if (!this.indented &&\n                !reMaybeSpecial.test(ln.slice(this.nextNonspace))) {\n                this.advanceNextNonspace();\n                break;\n            }\n\n            let i = 0;\n            while (i < startsLen) {\n                const res = starts[i](this, container);\n                if (res === 1) {\n                    container = this.tip;\n                    break;\n                }\n                else if (res === 2) {\n                    container = this.tip;\n                    matchedLeaf = true;\n                    break;\n                }\n                else {\n                    i++;\n                }\n            }\n\n            if (i === startsLen) { // nothing matched\n                this.advanceNextNonspace();\n                break;\n            }\n        }\n\n        // What remains at the offset is a text line.  Add the text to the\n        // appropriate container.\n\n        // First check for a lazy paragraph continuation:\n        if (!this.allClosed && !this.blank &&\n            this.tip.type === 'paragraph') {\n            // lazy paragraph continuation\n            this.addLine();\n\n        }\n        else { // not a lazy continuation\n\n            // finalize any blocks not matched\n            this.closeUnmatchedBlocks();\n            if (this.blank && container.lastChild) {\n                container.lastChild._lastLineBlank = true;\n            }\n\n            const t = container.type;\n\n            // Block quote lines are never blank as they start with >\n            // and we don't count blanks in fenced code for purposes of tight/loose\n            // lists or breaking out of lists.  We also don't set _lastLineBlank\n            // on an empty list item, or if we just closed a fenced block.\n            const lastLineBlank = this.blank &&\n                !(t === 'block_quote' ||\n                    (t === 'code_block' && container.isFenced) ||\n                    (t === 'item' &&\n                        !container.firstChild &&\n                        container.sourcepos[0][0] === this.lineNumber));\n\n            // propagate lastLineBlank up through parents:\n            let cont = container;\n            while (cont) {\n                cont._lastLineBlank = lastLineBlank;\n                cont = cont.parent;\n            }\n\n            if (this.blocks[t].acceptsLines) {\n                this.addLine();\n                // if HtmlBlock, check for end condition\n                if (t === 'html_block' &&\n                    container.htmlBlockType >= 1 &&\n                    container.htmlBlockType <= 5 &&\n                    reHtmlBlockClose[container.htmlBlockType].test(this.currentLine.slice(this.offset))) {\n                    this.finalize(container, this.lineNumber);\n                }\n\n            } else if (this.offset < ln.length && !this.blank) {\n                // create paragraph container for line\n                container = this.addChild('paragraph', this.offset);\n                this.advanceNextNonspace();\n                this.addLine();\n            }\n        }\n        this.lastLineLength = ln.length;\n    }\n\n    advanceOffset(count: number, columns?: boolean): void {\n        const currentLine = this.currentLine;\n        // var charsToTab, charsToAdvance;\n        let c: string;\n        while (count > 0 && (c = currentLine[this.offset])) {\n            if (c === '\\t') {\n                const charsToTab = 4 - (this.column % 4);\n                if (columns) {\n                    this.partiallyConsumedTab = charsToTab > count;\n                    const charsToAdvance = charsToTab > count ? count : charsToTab;\n                    this.column += charsToAdvance;\n                    this.offset += this.partiallyConsumedTab ? 0 : 1;\n                    count -= charsToAdvance;\n                } else {\n                    this.partiallyConsumedTab = false;\n                    this.column += charsToTab;\n                    this.offset += 1;\n                    count -= 1;\n                }\n            } else {\n                this.partiallyConsumedTab = false;\n                this.offset += 1;\n                this.column += 1; // assume ascii; block starts are ascii\n                count -= 1;\n            }\n        }\n    }\n\n    advanceNextNonspace() {\n        this.offset = this.nextNonspace;\n        this.column = this.nextNonspaceColumn;\n        this.partiallyConsumedTab = false;\n    }\n\n    findNextNonspace() {\n        const currentLine = this.currentLine;\n        let i = this.offset;\n        let cols = this.column;\n        let c: string;\n\n        while ((c = currentLine.charAt(i)) !== '') {\n            if (c === ' ') {\n                i++;\n                cols++;\n            }\n            else if (c === '\\t') {\n                i++;\n                cols += (4 - (cols % 4));\n            }\n            else {\n                break;\n            }\n        }\n        this.blank = (c === '\\n' || c === '\\r' || c === '');\n        this.nextNonspace = i;\n        this.nextNonspaceColumn = cols;\n        this.indent = this.nextNonspaceColumn - this.column;\n        this.indented = this.indent >= CODE_INDENT;\n    }\n\n    // Finalize a block.  Close it and do any necessary postprocessing,\n    // e.g. creating string_content from strings, setting the 'tight'\n    // or 'loose' status of a list, and parsing the beginnings\n    // of paragraphs for reference definitions.  Reset the tip to the\n    // parent of the closed block.\n    finalize(block: Node, lineNumber: number) {\n        const above = block.parent;\n        block.open = false;\n        block.sourcepos[1] = [lineNumber, this.lastLineLength];\n\n        this.blocks[block.type].finalize(this, block);\n\n        this.tip = above;\n    }\n\n    // Walk through a block & children recursively, parsing string content\n    // into inline content where appropriate.\n    processInlines(block: Node) {\n        let node: Node;\n        let event;\n        const walker = block.walker();\n        this.inlineParser.refmap = this.refmap;\n        this.inlineParser.options = this.options;\n        while ((event = walker.next())) {\n            node = event.node;\n            const t = node.type;\n            if (!event.entering && (t === 'paragraph' || t === 'heading')) {\n                this.inlineParser.parse(node);\n            }\n        }\n    }\n\n    // Add a line to the block at the tip.  We assume the tip\n    // can accept lines -- that check should be done before calling this.\n    addLine() {\n        if (this.partiallyConsumedTab) {\n            this.offset += 1; // skip over tab\n            // add space characters:\n            const charsToTab = 4 - (this.column % 4);\n            this.tip._string_content += (' '.repeat(charsToTab));\n        }\n        this.tip._string_content += this.currentLine.slice(this.offset) + '\\n';\n    }\n\n    // Add block of type tag as a child of the tip.  If the tip can't\n    // accept children, close and finalize it and try its parent,\n    // and so on til we find a block that can accept children.\n    addChild(tag: string, offset: number): Node {\n        while (!this.blocks[this.tip.type].canContain(tag)) {\n            this.finalize(this.tip, this.lineNumber - 1);\n        }\n\n        const column_number = offset + 1; // offset 0 = column 1\n        const newBlock = new Node(tag, [[this.lineNumber, column_number], [0, 0]]);\n        newBlock._string_content = '';\n        this.tip.appendChild(newBlock);\n        this.tip = newBlock;\n        return newBlock;\n    }\n\n    // Finalize and close any unmatched blocks.\n    closeUnmatchedBlocks() {\n        if (!this.allClosed) {\n            // finalize any blocks not matched\n            while (this.oldtip !== this.lastMatchedContainer) {\n                const parent = this.oldtip.parent;\n                this.finalize(this.oldtip, this.lineNumber - 1);\n                this.oldtip = parent;\n            }\n            this.allClosed = true;\n        }\n    }\n\n}\n\n\n// The Parser object.\n/*\nfunction Parser(options) {\n    return {\n        doc: new Document(),\n        blocks: blocks,\n        blockStarts: blockStarts,\n        tip: this.doc,\n        oldtip: this.doc,\n        currentLine: \"\",\n        lineNumber: 0,\n        offset: 0,\n        column: 0,\n        nextNonspace: 0,\n        nextNonspaceColumn: 0,\n        indent: 0,\n        indented: false,\n        blank: false,\n        partiallyConsumedTab: false,\n        allClosed: true,\n        lastMatchedContainer: this.doc,\n        refmap: {},\n        lastLineLength: 0,\n        inlineParser: new InlineParser(options),\n        findNextNonspace: findNextNonspace,\n        advanceOffset: advanceOffset,\n        advanceNextNonspace: advanceNextNonspace,\n        addLine: addLine,\n        addChild: addChild,\n        incorporateLine: incorporateLine,\n        finalize: finalize,\n        processInlines: processInlines,\n        closeUnmatchedBlocks: closeUnmatchedBlocks,\n        parse: parse,\n        options: options || {}\n    };\n}\n*/\n","import { Node } from './node';\nimport { ENTITY, ESCAPABLE, normalizeURI, reHtmlTag, unescapeString } from './common';\nimport { normalizeReference } from './normalize-reference';\nimport { decodeHTML } from './entities';\n\n// Constants for character codes:\nconst C_NEWLINE = 10;\nconst C_ASTERISK = 42;\nconst C_UNDERSCORE = 95;\nconst C_BACKTICK = 96;\nconst C_OPEN_BRACKET = 91;\nconst C_CLOSE_BRACKET = 93;\nconst C_LESSTHAN = 60;\nconst C_BANG = 33;\nconst C_BACKSLASH = 92;\nconst C_AMPERSAND = 38;\nconst C_OPEN_PAREN = 40;\nconst C_CLOSE_PAREN = 41;\nconst C_COLON = 58;\nconst C_SINGLEQUOTE = 39;\nconst C_DOUBLEQUOTE = 34;\n\n// Some regexps used in inline parser:\n\nconst ESCAPED_CHAR = '\\\\\\\\' + ESCAPABLE;\n\nconst rePunctuation = new RegExp(/[!-#%-\\*,-/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/);\n\nconst reLinkTitle = new RegExp(\n    '^(?:\"(' + ESCAPED_CHAR + '|[^\"\\\\x00])*\"' +\n    '|' +\n    '\\'(' + ESCAPED_CHAR + '|[^\\'\\\\x00])*\\'' +\n    '|' +\n    '\\\\((' + ESCAPED_CHAR + '|[^)\\\\x00])*\\\\))');\n\nconst reLinkDestinationBraces = new RegExp(\n    '^(?:[<](?:[^ <>\\\\t\\\\n\\\\\\\\\\\\x00]' + '|' + ESCAPED_CHAR + '|' + '\\\\\\\\)*[>])');\n\nconst reEscapable = new RegExp('^' + ESCAPABLE);\n\nconst reEntityHere = new RegExp('^' + ENTITY, 'i');\n\nconst reTicks = /`+/;\n\nconst reTicksHere = /^`+/;\n\nconst reEllipses = /\\.\\.\\./g;\n\nconst reDash = /--+/g;\n\nconst reEmailAutolink = /^<([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;\n\nconst reAutolink = /^<[A-Za-z][A-Za-z0-9.+-]{1,31}:[^<>\\x00-\\x20]*>/i;\n\nconst reSpnl = /^ *(?:\\n *)?/;\n\nconst reWhitespaceChar = /^[ \\t\\n\\x0b\\x0c\\x0d]/;\n\nconst reWhitespace = /[ \\t\\n\\x0b\\x0c\\x0d]+/g;\n\nconst reUnicodeWhitespaceChar = /^\\s/;\n\nconst reFinalSpace = / *$/;\n\nconst reInitialSpace = /^ */;\n\nconst reSpaceAtEndOfLine = /^ *(?:\\n|$)/;\n\nconst reLinkLabel = new RegExp('^\\\\[(?:[^\\\\\\\\\\\\[\\\\]]|' + ESCAPED_CHAR +\n    '|\\\\\\\\){0,1000}\\\\]');\n\n// Matches a string of non-special characters.\nconst reMain = /^[^\\n`\\[\\]\\\\!<&*_'\"]+/m;\n\nconst text = function (s: string) {\n    const node = new Node('text');\n    node.literal = s;\n    return node;\n};\n\n// INLINE PARSER\n\n// These are methods of an InlineParser object, defined below.\n// An InlineParser keeps track of a subject (a string to be\n// parsed) and a position in that subject.\n\nexport interface Delimiter {\n    cc: number;\n    numdelims: number;\n    origdelims: number;\n    node: Node;\n    previous: Delimiter;\n    next: Delimiter;\n    can_open: boolean;\n    can_close: boolean;\n}\n\nexport interface Reference {\n    destination: string;\n    title: string;\n}\n\nexport interface Brackets {\n    active: boolean;\n    bracketAfter?: boolean;\n    image: boolean;\n    index: number;\n    node: Node;\n    previous: any;\n    previousDelimiter: Delimiter;\n}\n\nexport class InlineParser {\n    subject = '';\n    delimiters: Delimiter = null;\n    brackets: Brackets = null;\n    pos = 0;\n    options: { smart?: boolean };\n    refmap: { [label: string]: Reference } = {};\n    constructor(options = {}) {\n        this.options = options;\n    }\n    parse(block: Node): void {\n        return this.parseInlines(block);\n    }\n    /**\n     * Parse string content in block into inline children,\n     * using refmap to resolve references.\n     */\n    parseInlines(block: Node): void {\n        this.subject = block._string_content.trim();\n        this.pos = 0;\n        this.delimiters = null;\n        this.brackets = null;\n        while (this.parseInline(block)) {\n            // Do nothing else.\n        }\n        block._string_content = null; // allow raw string to be garbage collected\n        this.processEmphasis(null);\n    }\n\n    /**\n     * Parse the next inline element in subject, advancing subject position.\n     * On success, add the result to block's children and return true.\n     * On failure, return false.\n     */\n    parseInline(block: Node) {\n        let res = false;\n        const c = this.peek();\n        if (c === -1) {\n            return false;\n        }\n        switch (c) {\n            case C_NEWLINE:\n                res = this.parseNewline(block);\n                break;\n            case C_BACKSLASH:\n                res = this.parseBackslash(block);\n                break;\n            case C_BACKTICK:\n                res = this.parseBackticks(block);\n                break;\n            case C_ASTERISK:\n            case C_UNDERSCORE:\n                res = this.handleDelim(c, block);\n                break;\n            case C_SINGLEQUOTE:\n            case C_DOUBLEQUOTE:\n                res = this.options.smart && this.handleDelim(c, block);\n                break;\n            case C_OPEN_BRACKET:\n                res = this.parseOpenBracket(block);\n                break;\n            case C_BANG:\n                res = this.parseBang(block);\n                break;\n            case C_CLOSE_BRACKET:\n                res = this.parseCloseBracket(block);\n                break;\n            case C_LESSTHAN:\n                res = this.parseAutolink(block) || this.parseHtmlTag(block);\n                break;\n            case C_AMPERSAND:\n                res = this.parseEntity(block);\n                break;\n            default:\n                res = this.parseString(block);\n                break;\n        }\n        if (!res) {\n            this.pos += 1;\n            block.appendChild(text(String.fromCodePoint(c)));\n        }\n\n        return true;\n    }\n    /**\n     * Parse a newline.  If it was preceded by two spaces, return a hard\n     * line break; otherwise a soft line break.\n     */\n    parseNewline(block: Node) {\n        this.pos += 1; // assume we're at a \\n\n        // check previous node for trailing spaces\n        const lastc = block.lastChild;\n        if (lastc && lastc.type === 'text' && lastc.literal[lastc.literal.length - 1] === ' ') {\n            const hardbreak = lastc.literal[lastc.literal.length - 2] === ' ';\n            lastc.literal = lastc.literal.replace(reFinalSpace, '');\n            block.appendChild(new Node(hardbreak ? 'linebreak' : 'softbreak'));\n        }\n        else {\n            block.appendChild(new Node('softbreak'));\n        }\n        this.match(reInitialSpace); // gobble leading spaces in next line\n        return true;\n    }\n\n    /**\n     * Parse a run of ordinary characters, or a single character with\n     * a special meaning in markdown, as a plain string.\n     */\n    parseString(block: Node) {\n        let m: string;\n        if ((m = this.match(reMain))) {\n            if (this.options.smart) {\n                block.appendChild(text(\n                    m.replace(reEllipses, \"\\u2026\")\n                        .replace(reDash, function (chars) {\n                            let enCount = 0;\n                            let emCount = 0;\n                            if (chars.length % 3 === 0) { // If divisible by 3, use all em dashes\n                                emCount = chars.length / 3;\n                            } else if (chars.length % 2 === 0) { // If divisible by 2, use all en dashes\n                                enCount = chars.length / 2;\n                            } else if (chars.length % 3 === 2) { // If 2 extra dashes, use en dash for last 2; em dashes for rest\n                                enCount = 1;\n                                emCount = (chars.length - 2) / 3;\n                            } else { // Use en dashes for last 4 hyphens; em dashes for rest\n                                enCount = 2;\n                                emCount = (chars.length - 4) / 3;\n                            }\n                            return \"\\u2014\".repeat(emCount) + \"\\u2013\".repeat(enCount);\n                        })));\n            } else {\n                block.appendChild(text(m));\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Attempt to parse an entity.\n     */\n    parseEntity(block: Node): boolean {\n        let m: string;\n        if ((m = this.match(reEntityHere))) {\n            // decodeHTML comes from the entities library.\n            block.appendChild(text(decodeHTML(m)));\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Attempt to parse a link reference, modifying refmap.\n     */\n    parseReference(s: string, refmap: { [label: string]: Reference }): number {\n        this.subject = s;\n        this.pos = 0;\n        let rawlabel;\n        let dest;\n        let title;\n        let matchChars;\n        const startpos = this.pos;\n\n        // label:\n        matchChars = this.parseLinkLabel();\n        if (matchChars === 0) {\n            return 0;\n        } else {\n            rawlabel = this.subject.substr(0, matchChars);\n        }\n\n        // colon:\n        if (this.peek() === C_COLON) {\n            this.pos++;\n        } else {\n            this.pos = startpos;\n            return 0;\n        }\n\n        //  link url\n        this.spnl();\n\n        dest = this.parseLinkDestination();\n        if (dest === null || dest.length === 0) {\n            this.pos = startpos;\n            return 0;\n        }\n\n        const beforetitle = this.pos;\n        this.spnl();\n        title = this.parseLinkTitle();\n        if (title === null) {\n            title = '';\n            // rewind before spaces\n            this.pos = beforetitle;\n        }\n\n        // make sure we're at line end:\n        let atLineEnd = true;\n        if (this.match(reSpaceAtEndOfLine) === null) {\n            if (title === '') {\n                atLineEnd = false;\n            } else {\n                // the potential title we found is not at the line end,\n                // but it could still be a legal link reference if we\n                // discard the title\n                title = '';\n                // rewind before spaces\n                this.pos = beforetitle;\n                // and instead check if the link URL is at the line end\n                atLineEnd = this.match(reSpaceAtEndOfLine) !== null;\n            }\n        }\n\n        if (!atLineEnd) {\n            this.pos = startpos;\n            return 0;\n        }\n\n        const normlabel = normalizeReference(rawlabel);\n        if (normlabel === '') {\n            // label must contain non-whitespace characters\n            this.pos = startpos;\n            return 0;\n        }\n\n        if (!refmap[normlabel]) {\n            refmap[normlabel] = { destination: dest, title: title };\n        }\n        return this.pos - startpos;\n    }\n    // If re matches at current position in the subject, advance\n    // position in subject and return the match; otherwise return null.\n    match(re: RegExp): string {\n        const m = re.exec(this.subject.slice(this.pos));\n        if (m === null) {\n            return null;\n        }\n        else {\n            this.pos += m.index + m[0].length;\n            return m[0];\n        }\n    }\n\n    // Returns the code for the character at the current subject position, or -1\n    // there are no more characters.\n    peek(): number {\n        if (this.pos < this.subject.length) {\n            return this.subject.charCodeAt(this.pos);\n        }\n        else {\n            return -1;\n        }\n    }\n\n    // Parse zero or more space characters, including at most one newline\n    spnl(): boolean/**/ {\n        this.match(reSpnl);\n        return true;\n    }\n\n    // All of the parsers below try to match something at the current position\n    // in the subject.  If they succeed in matching anything, they\n    // return the inline matched, advancing the subject.\n\n    // Attempt to parse backticks, adding either a backtick code span or a\n    // literal sequence of backticks.\n    parseBackticks(block: Node): boolean {\n        const ticks = this.match(reTicksHere);\n        if (ticks === null) {\n            return false;\n        }\n        const afterOpenTicks = this.pos;\n        let matched;\n        let node;\n        while ((matched = this.match(reTicks)) !== null) {\n            if (matched === ticks) {\n                node = new Node('code');\n                node.literal = this.subject.slice(afterOpenTicks,\n                    this.pos - ticks.length)\n                    .trim().replace(reWhitespace, ' ');\n                block.appendChild(node);\n                return true;\n            }\n        }\n        // If we got here, we didn't match a closing backtick sequence.\n        this.pos = afterOpenTicks;\n        block.appendChild(text(ticks));\n        return true;\n    }\n\n    // Parse a backslash-escaped special character, adding either the escaped\n    // character, a hard line break (if the backslash is followed by a newline),\n    // or a literal backslash to the block's children.  Assumes current character\n    // is a backslash.\n    parseBackslash(block: Node) {\n        const subj = this.subject;\n        this.pos += 1;\n        if (this.peek() === C_NEWLINE) {\n            this.pos += 1;\n            const node = new Node('linebreak');\n            block.appendChild(node);\n        }\n        else if (reEscapable.test(subj.charAt(this.pos))) {\n            block.appendChild(text(subj.charAt(this.pos)));\n            this.pos += 1;\n        }\n        else {\n            block.appendChild(text('\\\\'));\n        }\n        return true;\n    }\n\n    // Attempt to parse an autolink (URL or email in pointy brackets).\n    parseAutolink(block: Node) {\n        let m: string;\n        if ((m = this.match(reEmailAutolink))) {\n            const dest = m.slice(1, m.length - 1);\n            const node = new Node('link');\n            node.destination = normalizeURI('mailto:' + dest);\n            node.title = '';\n            node.appendChild(text(dest));\n            block.appendChild(node);\n            return true;\n        }\n        else if ((m = this.match(reAutolink))) {\n            const dest = m.slice(1, m.length - 1);\n            const node = new Node('link');\n            node.destination = normalizeURI(dest);\n            node.title = '';\n            node.appendChild(text(dest));\n            block.appendChild(node);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    // Attempt to parse a raw HTML tag.\n    parseHtmlTag(block: Node) {\n        const m = this.match(reHtmlTag);\n        if (m === null) {\n            return false;\n        } else {\n            const node = new Node('html_inline');\n            node.literal = m;\n            block.appendChild(node);\n            return true;\n        }\n    }\n\n    // Scan a sequence of characters with code cc, and return information about\n    // the number of delimiters and whether they are positioned such that\n    // they can open and/or close emphasis or strong emphasis.  A utility\n    // function for strong/emph parsing.\n    scanDelims(cc: number) {\n        let numdelims = 0;\n        // let char_before: string, char_after, cc_after;\n        const startpos = this.pos;\n        // var left_flanking, right_flanking, can_open, can_close;\n        // var after_is_whitespace, after_is_punctuation, before_is_whitespace, before_is_punctuation;\n\n        if (cc === C_SINGLEQUOTE || cc === C_DOUBLEQUOTE) {\n            numdelims++;\n            this.pos++;\n        } else {\n            while (this.peek() === cc) {\n                numdelims++;\n                this.pos++;\n            }\n        }\n\n        if (numdelims === 0) {\n            return null;\n        }\n\n        const char_before = startpos === 0 ? '\\n' : this.subject.charAt(startpos - 1);\n        let char_after: string;\n\n        const cc_after = this.peek();\n        if (cc_after === -1) {\n            char_after = '\\n';\n        } else {\n            char_after = String.fromCodePoint(cc_after);\n        }\n\n        const after_is_whitespace = reUnicodeWhitespaceChar.test(char_after);\n        const after_is_punctuation = rePunctuation.test(char_after);\n        const before_is_whitespace = reUnicodeWhitespaceChar.test(char_before);\n        const before_is_punctuation = rePunctuation.test(char_before);\n\n        const left_flanking = !after_is_whitespace &&\n            (!after_is_punctuation || before_is_whitespace || before_is_punctuation);\n        const right_flanking = !before_is_whitespace &&\n            (!before_is_punctuation || after_is_whitespace || after_is_punctuation);\n        let can_open: boolean;\n        let can_close: boolean;\n        if (cc === C_UNDERSCORE) {\n            can_open = left_flanking && (!right_flanking || before_is_punctuation);\n            can_close = right_flanking && (!left_flanking || after_is_punctuation);\n        }\n        else if (cc === C_SINGLEQUOTE || cc === C_DOUBLEQUOTE) {\n            can_open = left_flanking && !right_flanking;\n            can_close = right_flanking;\n        }\n        else {\n            can_open = left_flanking;\n            can_close = right_flanking;\n        }\n        this.pos = startpos;\n        return {\n            numdelims: numdelims,\n            can_open: can_open,\n            can_close: can_close\n        };\n    }\n\n    // Handle a delimiter marker for emphasis or a quote.\n    handleDelim(cc: number, block: Node) {\n        const res = this.scanDelims(cc);\n        if (!res) {\n            return false;\n        }\n        const numdelims = res.numdelims;\n        const startpos = this.pos;\n        let contents: string;\n\n        this.pos += numdelims;\n        if (cc === C_SINGLEQUOTE) {\n            contents = \"\\u2019\";\n        } else if (cc === C_DOUBLEQUOTE) {\n            contents = \"\\u201C\";\n        } else {\n            contents = this.subject.slice(startpos, this.pos);\n        }\n        const node = text(contents);\n        block.appendChild(node);\n\n        // Add entry to stack for this opener\n        this.delimiters = {\n            cc: cc,\n            numdelims: numdelims,\n            origdelims: numdelims,\n            node: node,\n            previous: this.delimiters,\n            next: null,\n            can_open: res.can_open,\n            can_close: res.can_close\n        };\n        if (this.delimiters.previous !== null) {\n            this.delimiters.previous.next = this.delimiters;\n        }\n\n        return true;\n\n    }\n\n    removeDelimiter(delim: Delimiter) {\n        if (delim.previous !== null) {\n            delim.previous.next = delim.next;\n        }\n        if (delim.next === null) {\n            // top of stack\n            this.delimiters = delim.previous;\n        } else {\n            delim.next.previous = delim.previous;\n        }\n    }\n\n    removeDelimitersBetween(bottom: Delimiter, top: Delimiter) {\n        if (bottom.next !== top) {\n            bottom.next = top;\n            top.previous = bottom;\n        }\n    }\n\n    processEmphasis(stack_bottom: Delimiter) {\n        // var opener, old_closer;\n        // var opener_inl, closer_inl;\n        // var tempstack;\n        // var use_delims;\n        // var tmp, next;\n        let opener_found: boolean;\n        const openers_bottom: Delimiter[] = [];\n        let odd_match = false;\n\n        openers_bottom[C_UNDERSCORE] = stack_bottom;\n        openers_bottom[C_ASTERISK] = stack_bottom;\n        openers_bottom[C_SINGLEQUOTE] = stack_bottom;\n        openers_bottom[C_DOUBLEQUOTE] = stack_bottom;\n\n        // find first closer above stack_bottom:\n        let closer = this.delimiters;\n        while (closer !== null && closer.previous !== stack_bottom) {\n            closer = closer.previous;\n        }\n        // move forward, looking for closers, and handling each\n        while (closer !== null) {\n            const closercc = closer.cc;\n            if (!closer.can_close) {\n                closer = closer.next;\n            }\n            else {\n                // found emphasis closer. now look back for first matching opener:\n                let opener = closer.previous;\n                opener_found = false;\n                while (opener !== null && opener !== stack_bottom &&\n                    opener !== openers_bottom[closercc]) {\n                    odd_match = (closer.can_open || opener.can_close) &&\n                        (opener.origdelims + closer.origdelims) % 3 === 0;\n                    if (opener.cc === closer.cc && opener.can_open && !odd_match) {\n                        opener_found = true;\n                        break;\n                    }\n                    opener = opener.previous;\n                }\n                const old_closer = closer;\n\n                if (closercc === C_ASTERISK || closercc === C_UNDERSCORE) {\n                    if (!opener_found) {\n                        closer = closer.next;\n                    }\n                    else {\n                        // calculate actual number of delimiters used from closer\n                        const use_delims = (closer.numdelims >= 2 && opener.numdelims >= 2) ? 2 : 1;\n\n                        const opener_inl = opener.node;\n                        const closer_inl = closer.node;\n\n                        // remove used delimiters from stack elts and inlines\n                        opener.numdelims -= use_delims;\n                        closer.numdelims -= use_delims;\n                        opener_inl.literal =\n                            opener_inl.literal.slice(0,\n                                opener_inl.literal.length - use_delims);\n                        closer_inl.literal =\n                            closer_inl.literal.slice(0,\n                                closer_inl.literal.length - use_delims);\n\n                        // build contents for new emph element\n                        const emph = new Node(use_delims === 1 ? 'emph' : 'strong');\n\n                        let tmp = opener_inl.next;\n                        while (tmp && tmp !== closer_inl) {\n                            const next = tmp.next;\n                            tmp.unlink();\n                            emph.appendChild(tmp);\n                            tmp = next;\n                        }\n\n                        opener_inl.insertAfter(emph);\n\n                        // remove elts between opener and closer in delimiters stack\n                        this.removeDelimitersBetween(opener, closer);\n\n                        // if opener has 0 delims, remove it and the inline\n                        if (opener.numdelims === 0) {\n                            opener_inl.unlink();\n                            this.removeDelimiter(opener);\n                        }\n\n                        if (closer.numdelims === 0) {\n                            closer_inl.unlink();\n                            const tempstack = closer.next;\n                            this.removeDelimiter(closer);\n                            closer = tempstack;\n                        }\n\n                    }\n\n                } else if (closercc === C_SINGLEQUOTE) {\n                    closer.node.literal = \"\\u2019\";\n                    if (opener_found) {\n                        opener.node.literal = \"\\u2018\";\n                    }\n                    closer = closer.next;\n\n                } else if (closercc === C_DOUBLEQUOTE) {\n                    closer.node.literal = \"\\u201D\";\n                    if (opener_found) {\n                        opener.node.literal = \"\\u201C\";\n                    }\n                    closer = closer.next;\n\n                }\n                if (!opener_found && !odd_match) {\n                    // Set lower bound for future searches for openers:\n                    // We don't do this with odd_match because a **\n                    // that doesn't match an earlier * might turn into\n                    // an opener, and the * might be matched by something\n                    // else.\n                    openers_bottom[closercc] = old_closer.previous;\n                    if (!old_closer.can_open) {\n                        // We can remove a closer that can't be an opener,\n                        // once we've seen there's no matching opener:\n                        this.removeDelimiter(old_closer);\n                    }\n                }\n            }\n\n        }\n\n        // remove all delimiters\n        while (this.delimiters !== null && this.delimiters !== stack_bottom) {\n            this.removeDelimiter(this.delimiters);\n        }\n    }\n\n    // Attempt to parse link title (sans quotes), returning the string\n    // or null if no match.\n    parseLinkTitle() {\n        const title = this.match(reLinkTitle);\n        if (title === null) {\n            return null;\n        }\n        else {\n            // chop off quotes from title and unescape:\n            return unescapeString(title.substr(1, title.length - 2));\n        }\n    }\n\n    // Attempt to parse link destination, returning the string or\n    // null if no match.\n    parseLinkDestination() {\n        let res = this.match(reLinkDestinationBraces);\n        if (res === null) {\n            // TODO handrolled parser; res should be null or the string\n            const savepos = this.pos;\n            let openparens = 0;\n            let c: number;\n            while ((c = this.peek()) !== -1) {\n                if (c === C_BACKSLASH) {\n                    this.pos += 1;\n                    if (this.peek() !== -1) {\n                        this.pos += 1;\n                    }\n                } else if (c === C_OPEN_PAREN) {\n                    this.pos += 1;\n                    openparens += 1;\n                } else if (c === C_CLOSE_PAREN) {\n                    if (openparens < 1) {\n                        break;\n                    } else {\n                        this.pos += 1;\n                        openparens -= 1;\n                    }\n                } else if (reWhitespaceChar.exec(String.fromCodePoint(c)) !== null) {\n                    break;\n                } else {\n                    this.pos += 1;\n                }\n            }\n            res = this.subject.substr(savepos, this.pos - savepos);\n            return normalizeURI(unescapeString(res));\n        }\n        else {  // chop off surrounding <..>:\n            return normalizeURI(unescapeString(res.substr(1, res.length - 2)));\n        }\n    }\n\n    // Attempt to parse a link label, returning number of characters parsed.\n    parseLinkLabel() {\n        const m = this.match(reLinkLabel);\n        // Note:  our regex will allow something of form [..\\];\n        // we disallow it here rather than using lookahead in the regex:\n        if (m === null || m.length > 1001 || /[^\\\\]\\\\\\]$/.exec(m)) {\n            return 0;\n        }\n        else {\n            return m.length;\n        }\n    }\n\n    // Add open bracket to delimiter stack and add a text node to block's children.\n    parseOpenBracket(block: Node) {\n        const startpos = this.pos;\n        this.pos += 1;\n\n        const node = text('[');\n        block.appendChild(node);\n\n        // Add entry to stack for this opener\n        this.addBracket(node, startpos, false);\n        return true;\n    }\n\n    // IF next character is [, and ! delimiter to delimiter stack and\n    // add a text node to block's children.  Otherwise just add a text node.\n    parseBang(block: Node) {\n        const startpos = this.pos;\n        this.pos += 1;\n        if (this.peek() === C_OPEN_BRACKET) {\n            this.pos += 1;\n\n            const node = text('![');\n            block.appendChild(node);\n\n            // Add entry to stack for this opener\n            this.addBracket(node, startpos + 1, true);\n        }\n        else {\n            block.appendChild(text('!'));\n        }\n        return true;\n    }\n\n    // Try to match close bracket against an opening in the delimiter\n    // stack.  Add either a link or image, or a plain [ character,\n    // to block's children.  If there is a matching delimiter,\n    // remove it from the delimiter stack.\n    parseCloseBracket(block: Node) {\n        let dest: string;\n        let title: string;\n        let matched = false;\n        let reflabel: string;\n\n        this.pos += 1;\n        const startpos = this.pos;\n\n        // get last [ or ![\n        let opener = this.brackets;\n\n        if (opener === null) {\n            // no matched opener, just return a literal\n            block.appendChild(text(']'));\n            return true;\n        }\n\n        if (!opener.active) {\n            // no matched opener, just return a literal\n            block.appendChild(text(']'));\n            // take opener off brackets stack\n            this.removeBracket();\n            return true;\n        }\n\n        // If we got here, open is a potential opener\n        const is_image = opener.image;\n\n        // Check to see if we have a link/image\n\n        const savepos = this.pos;\n\n        // Inline link?\n        if (this.peek() === C_OPEN_PAREN) {\n            this.pos++;\n            if (this.spnl() &&\n                ((dest = this.parseLinkDestination()) !== null) &&\n                this.spnl() &&\n                // make sure there's a space before the title:\n                (reWhitespaceChar.test(this.subject.charAt(this.pos - 1)) &&\n                    (title = this.parseLinkTitle()) || true) &&\n                this.spnl() &&\n                this.peek() === C_CLOSE_PAREN) {\n                this.pos += 1;\n                matched = true;\n            } else {\n                this.pos = savepos;\n            }\n        }\n\n        if (!matched) {\n\n            // Next, see if there's a link label\n            const beforelabel = this.pos;\n            const n = this.parseLinkLabel();\n            if (n > 2) {\n                reflabel = this.subject.slice(beforelabel, beforelabel + n);\n            } else if (!opener.bracketAfter) {\n                // Empty or missing second label means to use the first label as the reference.\n                // The reference must not contain a bracket. If we know there's a bracket, we don't even bother checking it.\n                reflabel = this.subject.slice(opener.index, startpos);\n            }\n            if (n === 0) {\n                // If shortcut reference link, rewind before spaces we skipped.\n                this.pos = savepos;\n            }\n\n            if (reflabel) {\n                // lookup rawlabel in refmap\n                const link = this.refmap[normalizeReference(reflabel)];\n                if (link) {\n                    dest = link.destination;\n                    title = link.title;\n                    matched = true;\n                }\n            }\n        }\n\n        if (matched) {\n            const node = new Node(is_image ? 'image' : 'link');\n            node.destination = dest;\n            node.title = title || '';\n\n            let tmp = opener.node.next;\n            while (tmp) {\n                let next = tmp.next;\n                tmp.unlink();\n                node.appendChild(tmp);\n                tmp = next;\n            }\n            block.appendChild(node);\n            this.processEmphasis(opener.previousDelimiter);\n            this.removeBracket();\n            opener.node.unlink();\n\n            // We remove this bracket and processEmphasis will remove later delimiters.\n            // Now, for a link, we also deactivate earlier link openers.\n            // (no links in links)\n            if (!is_image) {\n                opener = this.brackets;\n                while (opener !== null) {\n                    if (!opener.image) {\n                        opener.active = false; // deactivate this opener\n                    }\n                    opener = opener.previous;\n                }\n            }\n            return true;\n        }\n        else { // no match\n            this.removeBracket();  // remove this opener from stack\n            this.pos = startpos;\n            block.appendChild(text(']'));\n            return true;\n        }\n    }\n\n    addBracket(node: Node, index: number, image: boolean) {\n        if (this.brackets !== null) {\n            this.brackets.bracketAfter = true;\n        }\n        this.brackets = {\n            node: node,\n            previous: this.brackets,\n            previousDelimiter: this.delimiters,\n            index: index,\n            image: image,\n            active: true\n        };\n    }\n\n    removeBracket() {\n        this.brackets = this.brackets.previous;\n    }\n\n}\n\n// The InlineParser object.\n/*\nfunction InlineParser(options){\n    return {\n        subject: '',\n        delimiters: null,  // used by handleDelim method\n        brackets: null,\n        pos: 0,\n        refmap: {},\n        match: match,\n        peek: peek,\n        spnl: spnl,\n        parseBackticks: parseBackticks,\n        parseBackslash: parseBackslash,\n        parseAutolink: parseAutolink,\n        parseHtmlTag: parseHtmlTag,\n        scanDelims: scanDelims,\n        handleDelim: handleDelim,\n        parseLinkTitle: parseLinkTitle,\n        parseLinkDestination: parseLinkDestination,\n        parseLinkLabel: parseLinkLabel,\n        parseOpenBracket: parseOpenBracket,\n        parseBang: parseBang,\n        parseCloseBracket: parseCloseBracket,\n        addBracket: addBracket,\n        removeBracket: removeBracket,\n        parseEntity: parseEntity,\n        parseString: parseString,\n        parseNewline: parseNewline,\n        parseReference: parseReference,\n        parseInline: parseInline,\n        processEmphasis: processEmphasis,\n        removeDelimiter: removeDelimiter,\n        options: options || {},\n        parse: parseInlines\n    };\n}\n*/\n","/* The bulk of this code derives from https://github.com/dmoscrop/fold-case\nBut in addition to case-folding, we also normalize whitespace.\n\nfold-case is Copyright Mathias Bynens <https://mathiasbynens.be/>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/*eslint-disable  key-spacing, comma-spacing */\n\nconst regex = /[ \\t\\r\\n]+|[A-Z\\xB5\\xC0-\\xD6\\xD8-\\xDF\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u0149\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u017F\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C5\\u01C7\\u01C8\\u01CA\\u01CB\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F0-\\u01F2\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0345\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03AB\\u03B0\\u03C2\\u03CF-\\u03D1\\u03D5\\u03D6\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F0\\u03F1\\u03F4\\u03F5\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u0587\\u10A0-\\u10C5\\u10C7\\u10CD\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E96-\\u1E9B\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F50\\u1F52\\u1F54\\u1F56\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1F80-\\u1FAF\\u1FB2-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD2\\u1FD3\\u1FD6-\\u1FDB\\u1FE2-\\u1FE4\\u1FE6-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2126\\u212A\\u212B\\u2132\\u2160-\\u216F\\u2183\\u24B6-\\u24CF\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0\\uA7B1\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF21-\\uFF3A]|\\uD801[\\uDC00-\\uDC27]|\\uD806[\\uDCA0-\\uDCBF]/g;\n\nconst map: { [key: string]: string } = { 'A': 'a', 'B': 'b', 'C': 'c', 'D': 'd', 'E': 'e', 'F': 'f', 'G': 'g', 'H': 'h', 'I': 'i', 'J': 'j', 'K': 'k', 'L': 'l', 'M': 'm', 'N': 'n', 'O': 'o', 'P': 'p', 'Q': 'q', 'R': 'r', 'S': 's', 'T': 't', 'U': 'u', 'V': 'v', 'W': 'w', 'X': 'x', 'Y': 'y', 'Z': 'z', '\\xB5': '\\u03BC', '\\xC0': '\\xE0', '\\xC1': '\\xE1', '\\xC2': '\\xE2', '\\xC3': '\\xE3', '\\xC4': '\\xE4', '\\xC5': '\\xE5', '\\xC6': '\\xE6', '\\xC7': '\\xE7', '\\xC8': '\\xE8', '\\xC9': '\\xE9', '\\xCA': '\\xEA', '\\xCB': '\\xEB', '\\xCC': '\\xEC', '\\xCD': '\\xED', '\\xCE': '\\xEE', '\\xCF': '\\xEF', '\\xD0': '\\xF0', '\\xD1': '\\xF1', '\\xD2': '\\xF2', '\\xD3': '\\xF3', '\\xD4': '\\xF4', '\\xD5': '\\xF5', '\\xD6': '\\xF6', '\\xD8': '\\xF8', '\\xD9': '\\xF9', '\\xDA': '\\xFA', '\\xDB': '\\xFB', '\\xDC': '\\xFC', '\\xDD': '\\xFD', '\\xDE': '\\xFE', '\\u0100': '\\u0101', '\\u0102': '\\u0103', '\\u0104': '\\u0105', '\\u0106': '\\u0107', '\\u0108': '\\u0109', '\\u010A': '\\u010B', '\\u010C': '\\u010D', '\\u010E': '\\u010F', '\\u0110': '\\u0111', '\\u0112': '\\u0113', '\\u0114': '\\u0115', '\\u0116': '\\u0117', '\\u0118': '\\u0119', '\\u011A': '\\u011B', '\\u011C': '\\u011D', '\\u011E': '\\u011F', '\\u0120': '\\u0121', '\\u0122': '\\u0123', '\\u0124': '\\u0125', '\\u0126': '\\u0127', '\\u0128': '\\u0129', '\\u012A': '\\u012B', '\\u012C': '\\u012D', '\\u012E': '\\u012F', '\\u0132': '\\u0133', '\\u0134': '\\u0135', '\\u0136': '\\u0137', '\\u0139': '\\u013A', '\\u013B': '\\u013C', '\\u013D': '\\u013E', '\\u013F': '\\u0140', '\\u0141': '\\u0142', '\\u0143': '\\u0144', '\\u0145': '\\u0146', '\\u0147': '\\u0148', '\\u014A': '\\u014B', '\\u014C': '\\u014D', '\\u014E': '\\u014F', '\\u0150': '\\u0151', '\\u0152': '\\u0153', '\\u0154': '\\u0155', '\\u0156': '\\u0157', '\\u0158': '\\u0159', '\\u015A': '\\u015B', '\\u015C': '\\u015D', '\\u015E': '\\u015F', '\\u0160': '\\u0161', '\\u0162': '\\u0163', '\\u0164': '\\u0165', '\\u0166': '\\u0167', '\\u0168': '\\u0169', '\\u016A': '\\u016B', '\\u016C': '\\u016D', '\\u016E': '\\u016F', '\\u0170': '\\u0171', '\\u0172': '\\u0173', '\\u0174': '\\u0175', '\\u0176': '\\u0177', '\\u0178': '\\xFF', '\\u0179': '\\u017A', '\\u017B': '\\u017C', '\\u017D': '\\u017E', '\\u017F': 's', '\\u0181': '\\u0253', '\\u0182': '\\u0183', '\\u0184': '\\u0185', '\\u0186': '\\u0254', '\\u0187': '\\u0188', '\\u0189': '\\u0256', '\\u018A': '\\u0257', '\\u018B': '\\u018C', '\\u018E': '\\u01DD', '\\u018F': '\\u0259', '\\u0190': '\\u025B', '\\u0191': '\\u0192', '\\u0193': '\\u0260', '\\u0194': '\\u0263', '\\u0196': '\\u0269', '\\u0197': '\\u0268', '\\u0198': '\\u0199', '\\u019C': '\\u026F', '\\u019D': '\\u0272', '\\u019F': '\\u0275', '\\u01A0': '\\u01A1', '\\u01A2': '\\u01A3', '\\u01A4': '\\u01A5', '\\u01A6': '\\u0280', '\\u01A7': '\\u01A8', '\\u01A9': '\\u0283', '\\u01AC': '\\u01AD', '\\u01AE': '\\u0288', '\\u01AF': '\\u01B0', '\\u01B1': '\\u028A', '\\u01B2': '\\u028B', '\\u01B3': '\\u01B4', '\\u01B5': '\\u01B6', '\\u01B7': '\\u0292', '\\u01B8': '\\u01B9', '\\u01BC': '\\u01BD', '\\u01C4': '\\u01C6', '\\u01C5': '\\u01C6', '\\u01C7': '\\u01C9', '\\u01C8': '\\u01C9', '\\u01CA': '\\u01CC', '\\u01CB': '\\u01CC', '\\u01CD': '\\u01CE', '\\u01CF': '\\u01D0', '\\u01D1': '\\u01D2', '\\u01D3': '\\u01D4', '\\u01D5': '\\u01D6', '\\u01D7': '\\u01D8', '\\u01D9': '\\u01DA', '\\u01DB': '\\u01DC', '\\u01DE': '\\u01DF', '\\u01E0': '\\u01E1', '\\u01E2': '\\u01E3', '\\u01E4': '\\u01E5', '\\u01E6': '\\u01E7', '\\u01E8': '\\u01E9', '\\u01EA': '\\u01EB', '\\u01EC': '\\u01ED', '\\u01EE': '\\u01EF', '\\u01F1': '\\u01F3', '\\u01F2': '\\u01F3', '\\u01F4': '\\u01F5', '\\u01F6': '\\u0195', '\\u01F7': '\\u01BF', '\\u01F8': '\\u01F9', '\\u01FA': '\\u01FB', '\\u01FC': '\\u01FD', '\\u01FE': '\\u01FF', '\\u0200': '\\u0201', '\\u0202': '\\u0203', '\\u0204': '\\u0205', '\\u0206': '\\u0207', '\\u0208': '\\u0209', '\\u020A': '\\u020B', '\\u020C': '\\u020D', '\\u020E': '\\u020F', '\\u0210': '\\u0211', '\\u0212': '\\u0213', '\\u0214': '\\u0215', '\\u0216': '\\u0217', '\\u0218': '\\u0219', '\\u021A': '\\u021B', '\\u021C': '\\u021D', '\\u021E': '\\u021F', '\\u0220': '\\u019E', '\\u0222': '\\u0223', '\\u0224': '\\u0225', '\\u0226': '\\u0227', '\\u0228': '\\u0229', '\\u022A': '\\u022B', '\\u022C': '\\u022D', '\\u022E': '\\u022F', '\\u0230': '\\u0231', '\\u0232': '\\u0233', '\\u023A': '\\u2C65', '\\u023B': '\\u023C', '\\u023D': '\\u019A', '\\u023E': '\\u2C66', '\\u0241': '\\u0242', '\\u0243': '\\u0180', '\\u0244': '\\u0289', '\\u0245': '\\u028C', '\\u0246': '\\u0247', '\\u0248': '\\u0249', '\\u024A': '\\u024B', '\\u024C': '\\u024D', '\\u024E': '\\u024F', '\\u0345': '\\u03B9', '\\u0370': '\\u0371', '\\u0372': '\\u0373', '\\u0376': '\\u0377', '\\u037F': '\\u03F3', '\\u0386': '\\u03AC', '\\u0388': '\\u03AD', '\\u0389': '\\u03AE', '\\u038A': '\\u03AF', '\\u038C': '\\u03CC', '\\u038E': '\\u03CD', '\\u038F': '\\u03CE', '\\u0391': '\\u03B1', '\\u0392': '\\u03B2', '\\u0393': '\\u03B3', '\\u0394': '\\u03B4', '\\u0395': '\\u03B5', '\\u0396': '\\u03B6', '\\u0397': '\\u03B7', '\\u0398': '\\u03B8', '\\u0399': '\\u03B9', '\\u039A': '\\u03BA', '\\u039B': '\\u03BB', '\\u039C': '\\u03BC', '\\u039D': '\\u03BD', '\\u039E': '\\u03BE', '\\u039F': '\\u03BF', '\\u03A0': '\\u03C0', '\\u03A1': '\\u03C1', '\\u03A3': '\\u03C3', '\\u03A4': '\\u03C4', '\\u03A5': '\\u03C5', '\\u03A6': '\\u03C6', '\\u03A7': '\\u03C7', '\\u03A8': '\\u03C8', '\\u03A9': '\\u03C9', '\\u03AA': '\\u03CA', '\\u03AB': '\\u03CB', '\\u03C2': '\\u03C3', '\\u03CF': '\\u03D7', '\\u03D0': '\\u03B2', '\\u03D1': '\\u03B8', '\\u03D5': '\\u03C6', '\\u03D6': '\\u03C0', '\\u03D8': '\\u03D9', '\\u03DA': '\\u03DB', '\\u03DC': '\\u03DD', '\\u03DE': '\\u03DF', '\\u03E0': '\\u03E1', '\\u03E2': '\\u03E3', '\\u03E4': '\\u03E5', '\\u03E6': '\\u03E7', '\\u03E8': '\\u03E9', '\\u03EA': '\\u03EB', '\\u03EC': '\\u03ED', '\\u03EE': '\\u03EF', '\\u03F0': '\\u03BA', '\\u03F1': '\\u03C1', '\\u03F4': '\\u03B8', '\\u03F5': '\\u03B5', '\\u03F7': '\\u03F8', '\\u03F9': '\\u03F2', '\\u03FA': '\\u03FB', '\\u03FD': '\\u037B', '\\u03FE': '\\u037C', '\\u03FF': '\\u037D', '\\u0400': '\\u0450', '\\u0401': '\\u0451', '\\u0402': '\\u0452', '\\u0403': '\\u0453', '\\u0404': '\\u0454', '\\u0405': '\\u0455', '\\u0406': '\\u0456', '\\u0407': '\\u0457', '\\u0408': '\\u0458', '\\u0409': '\\u0459', '\\u040A': '\\u045A', '\\u040B': '\\u045B', '\\u040C': '\\u045C', '\\u040D': '\\u045D', '\\u040E': '\\u045E', '\\u040F': '\\u045F', '\\u0410': '\\u0430', '\\u0411': '\\u0431', '\\u0412': '\\u0432', '\\u0413': '\\u0433', '\\u0414': '\\u0434', '\\u0415': '\\u0435', '\\u0416': '\\u0436', '\\u0417': '\\u0437', '\\u0418': '\\u0438', '\\u0419': '\\u0439', '\\u041A': '\\u043A', '\\u041B': '\\u043B', '\\u041C': '\\u043C', '\\u041D': '\\u043D', '\\u041E': '\\u043E', '\\u041F': '\\u043F', '\\u0420': '\\u0440', '\\u0421': '\\u0441', '\\u0422': '\\u0442', '\\u0423': '\\u0443', '\\u0424': '\\u0444', '\\u0425': '\\u0445', '\\u0426': '\\u0446', '\\u0427': '\\u0447', '\\u0428': '\\u0448', '\\u0429': '\\u0449', '\\u042A': '\\u044A', '\\u042B': '\\u044B', '\\u042C': '\\u044C', '\\u042D': '\\u044D', '\\u042E': '\\u044E', '\\u042F': '\\u044F', '\\u0460': '\\u0461', '\\u0462': '\\u0463', '\\u0464': '\\u0465', '\\u0466': '\\u0467', '\\u0468': '\\u0469', '\\u046A': '\\u046B', '\\u046C': '\\u046D', '\\u046E': '\\u046F', '\\u0470': '\\u0471', '\\u0472': '\\u0473', '\\u0474': '\\u0475', '\\u0476': '\\u0477', '\\u0478': '\\u0479', '\\u047A': '\\u047B', '\\u047C': '\\u047D', '\\u047E': '\\u047F', '\\u0480': '\\u0481', '\\u048A': '\\u048B', '\\u048C': '\\u048D', '\\u048E': '\\u048F', '\\u0490': '\\u0491', '\\u0492': '\\u0493', '\\u0494': '\\u0495', '\\u0496': '\\u0497', '\\u0498': '\\u0499', '\\u049A': '\\u049B', '\\u049C': '\\u049D', '\\u049E': '\\u049F', '\\u04A0': '\\u04A1', '\\u04A2': '\\u04A3', '\\u04A4': '\\u04A5', '\\u04A6': '\\u04A7', '\\u04A8': '\\u04A9', '\\u04AA': '\\u04AB', '\\u04AC': '\\u04AD', '\\u04AE': '\\u04AF', '\\u04B0': '\\u04B1', '\\u04B2': '\\u04B3', '\\u04B4': '\\u04B5', '\\u04B6': '\\u04B7', '\\u04B8': '\\u04B9', '\\u04BA': '\\u04BB', '\\u04BC': '\\u04BD', '\\u04BE': '\\u04BF', '\\u04C0': '\\u04CF', '\\u04C1': '\\u04C2', '\\u04C3': '\\u04C4', '\\u04C5': '\\u04C6', '\\u04C7': '\\u04C8', '\\u04C9': '\\u04CA', '\\u04CB': '\\u04CC', '\\u04CD': '\\u04CE', '\\u04D0': '\\u04D1', '\\u04D2': '\\u04D3', '\\u04D4': '\\u04D5', '\\u04D6': '\\u04D7', '\\u04D8': '\\u04D9', '\\u04DA': '\\u04DB', '\\u04DC': '\\u04DD', '\\u04DE': '\\u04DF', '\\u04E0': '\\u04E1', '\\u04E2': '\\u04E3', '\\u04E4': '\\u04E5', '\\u04E6': '\\u04E7', '\\u04E8': '\\u04E9', '\\u04EA': '\\u04EB', '\\u04EC': '\\u04ED', '\\u04EE': '\\u04EF', '\\u04F0': '\\u04F1', '\\u04F2': '\\u04F3', '\\u04F4': '\\u04F5', '\\u04F6': '\\u04F7', '\\u04F8': '\\u04F9', '\\u04FA': '\\u04FB', '\\u04FC': '\\u04FD', '\\u04FE': '\\u04FF', '\\u0500': '\\u0501', '\\u0502': '\\u0503', '\\u0504': '\\u0505', '\\u0506': '\\u0507', '\\u0508': '\\u0509', '\\u050A': '\\u050B', '\\u050C': '\\u050D', '\\u050E': '\\u050F', '\\u0510': '\\u0511', '\\u0512': '\\u0513', '\\u0514': '\\u0515', '\\u0516': '\\u0517', '\\u0518': '\\u0519', '\\u051A': '\\u051B', '\\u051C': '\\u051D', '\\u051E': '\\u051F', '\\u0520': '\\u0521', '\\u0522': '\\u0523', '\\u0524': '\\u0525', '\\u0526': '\\u0527', '\\u0528': '\\u0529', '\\u052A': '\\u052B', '\\u052C': '\\u052D', '\\u052E': '\\u052F', '\\u0531': '\\u0561', '\\u0532': '\\u0562', '\\u0533': '\\u0563', '\\u0534': '\\u0564', '\\u0535': '\\u0565', '\\u0536': '\\u0566', '\\u0537': '\\u0567', '\\u0538': '\\u0568', '\\u0539': '\\u0569', '\\u053A': '\\u056A', '\\u053B': '\\u056B', '\\u053C': '\\u056C', '\\u053D': '\\u056D', '\\u053E': '\\u056E', '\\u053F': '\\u056F', '\\u0540': '\\u0570', '\\u0541': '\\u0571', '\\u0542': '\\u0572', '\\u0543': '\\u0573', '\\u0544': '\\u0574', '\\u0545': '\\u0575', '\\u0546': '\\u0576', '\\u0547': '\\u0577', '\\u0548': '\\u0578', '\\u0549': '\\u0579', '\\u054A': '\\u057A', '\\u054B': '\\u057B', '\\u054C': '\\u057C', '\\u054D': '\\u057D', '\\u054E': '\\u057E', '\\u054F': '\\u057F', '\\u0550': '\\u0580', '\\u0551': '\\u0581', '\\u0552': '\\u0582', '\\u0553': '\\u0583', '\\u0554': '\\u0584', '\\u0555': '\\u0585', '\\u0556': '\\u0586', '\\u10A0': '\\u2D00', '\\u10A1': '\\u2D01', '\\u10A2': '\\u2D02', '\\u10A3': '\\u2D03', '\\u10A4': '\\u2D04', '\\u10A5': '\\u2D05', '\\u10A6': '\\u2D06', '\\u10A7': '\\u2D07', '\\u10A8': '\\u2D08', '\\u10A9': '\\u2D09', '\\u10AA': '\\u2D0A', '\\u10AB': '\\u2D0B', '\\u10AC': '\\u2D0C', '\\u10AD': '\\u2D0D', '\\u10AE': '\\u2D0E', '\\u10AF': '\\u2D0F', '\\u10B0': '\\u2D10', '\\u10B1': '\\u2D11', '\\u10B2': '\\u2D12', '\\u10B3': '\\u2D13', '\\u10B4': '\\u2D14', '\\u10B5': '\\u2D15', '\\u10B6': '\\u2D16', '\\u10B7': '\\u2D17', '\\u10B8': '\\u2D18', '\\u10B9': '\\u2D19', '\\u10BA': '\\u2D1A', '\\u10BB': '\\u2D1B', '\\u10BC': '\\u2D1C', '\\u10BD': '\\u2D1D', '\\u10BE': '\\u2D1E', '\\u10BF': '\\u2D1F', '\\u10C0': '\\u2D20', '\\u10C1': '\\u2D21', '\\u10C2': '\\u2D22', '\\u10C3': '\\u2D23', '\\u10C4': '\\u2D24', '\\u10C5': '\\u2D25', '\\u10C7': '\\u2D27', '\\u10CD': '\\u2D2D', '\\u1E00': '\\u1E01', '\\u1E02': '\\u1E03', '\\u1E04': '\\u1E05', '\\u1E06': '\\u1E07', '\\u1E08': '\\u1E09', '\\u1E0A': '\\u1E0B', '\\u1E0C': '\\u1E0D', '\\u1E0E': '\\u1E0F', '\\u1E10': '\\u1E11', '\\u1E12': '\\u1E13', '\\u1E14': '\\u1E15', '\\u1E16': '\\u1E17', '\\u1E18': '\\u1E19', '\\u1E1A': '\\u1E1B', '\\u1E1C': '\\u1E1D', '\\u1E1E': '\\u1E1F', '\\u1E20': '\\u1E21', '\\u1E22': '\\u1E23', '\\u1E24': '\\u1E25', '\\u1E26': '\\u1E27', '\\u1E28': '\\u1E29', '\\u1E2A': '\\u1E2B', '\\u1E2C': '\\u1E2D', '\\u1E2E': '\\u1E2F', '\\u1E30': '\\u1E31', '\\u1E32': '\\u1E33', '\\u1E34': '\\u1E35', '\\u1E36': '\\u1E37', '\\u1E38': '\\u1E39', '\\u1E3A': '\\u1E3B', '\\u1E3C': '\\u1E3D', '\\u1E3E': '\\u1E3F', '\\u1E40': '\\u1E41', '\\u1E42': '\\u1E43', '\\u1E44': '\\u1E45', '\\u1E46': '\\u1E47', '\\u1E48': '\\u1E49', '\\u1E4A': '\\u1E4B', '\\u1E4C': '\\u1E4D', '\\u1E4E': '\\u1E4F', '\\u1E50': '\\u1E51', '\\u1E52': '\\u1E53', '\\u1E54': '\\u1E55', '\\u1E56': '\\u1E57', '\\u1E58': '\\u1E59', '\\u1E5A': '\\u1E5B', '\\u1E5C': '\\u1E5D', '\\u1E5E': '\\u1E5F', '\\u1E60': '\\u1E61', '\\u1E62': '\\u1E63', '\\u1E64': '\\u1E65', '\\u1E66': '\\u1E67', '\\u1E68': '\\u1E69', '\\u1E6A': '\\u1E6B', '\\u1E6C': '\\u1E6D', '\\u1E6E': '\\u1E6F', '\\u1E70': '\\u1E71', '\\u1E72': '\\u1E73', '\\u1E74': '\\u1E75', '\\u1E76': '\\u1E77', '\\u1E78': '\\u1E79', '\\u1E7A': '\\u1E7B', '\\u1E7C': '\\u1E7D', '\\u1E7E': '\\u1E7F', '\\u1E80': '\\u1E81', '\\u1E82': '\\u1E83', '\\u1E84': '\\u1E85', '\\u1E86': '\\u1E87', '\\u1E88': '\\u1E89', '\\u1E8A': '\\u1E8B', '\\u1E8C': '\\u1E8D', '\\u1E8E': '\\u1E8F', '\\u1E90': '\\u1E91', '\\u1E92': '\\u1E93', '\\u1E94': '\\u1E95', '\\u1E9B': '\\u1E61', '\\u1EA0': '\\u1EA1', '\\u1EA2': '\\u1EA3', '\\u1EA4': '\\u1EA5', '\\u1EA6': '\\u1EA7', '\\u1EA8': '\\u1EA9', '\\u1EAA': '\\u1EAB', '\\u1EAC': '\\u1EAD', '\\u1EAE': '\\u1EAF', '\\u1EB0': '\\u1EB1', '\\u1EB2': '\\u1EB3', '\\u1EB4': '\\u1EB5', '\\u1EB6': '\\u1EB7', '\\u1EB8': '\\u1EB9', '\\u1EBA': '\\u1EBB', '\\u1EBC': '\\u1EBD', '\\u1EBE': '\\u1EBF', '\\u1EC0': '\\u1EC1', '\\u1EC2': '\\u1EC3', '\\u1EC4': '\\u1EC5', '\\u1EC6': '\\u1EC7', '\\u1EC8': '\\u1EC9', '\\u1ECA': '\\u1ECB', '\\u1ECC': '\\u1ECD', '\\u1ECE': '\\u1ECF', '\\u1ED0': '\\u1ED1', '\\u1ED2': '\\u1ED3', '\\u1ED4': '\\u1ED5', '\\u1ED6': '\\u1ED7', '\\u1ED8': '\\u1ED9', '\\u1EDA': '\\u1EDB', '\\u1EDC': '\\u1EDD', '\\u1EDE': '\\u1EDF', '\\u1EE0': '\\u1EE1', '\\u1EE2': '\\u1EE3', '\\u1EE4': '\\u1EE5', '\\u1EE6': '\\u1EE7', '\\u1EE8': '\\u1EE9', '\\u1EEA': '\\u1EEB', '\\u1EEC': '\\u1EED', '\\u1EEE': '\\u1EEF', '\\u1EF0': '\\u1EF1', '\\u1EF2': '\\u1EF3', '\\u1EF4': '\\u1EF5', '\\u1EF6': '\\u1EF7', '\\u1EF8': '\\u1EF9', '\\u1EFA': '\\u1EFB', '\\u1EFC': '\\u1EFD', '\\u1EFE': '\\u1EFF', '\\u1F08': '\\u1F00', '\\u1F09': '\\u1F01', '\\u1F0A': '\\u1F02', '\\u1F0B': '\\u1F03', '\\u1F0C': '\\u1F04', '\\u1F0D': '\\u1F05', '\\u1F0E': '\\u1F06', '\\u1F0F': '\\u1F07', '\\u1F18': '\\u1F10', '\\u1F19': '\\u1F11', '\\u1F1A': '\\u1F12', '\\u1F1B': '\\u1F13', '\\u1F1C': '\\u1F14', '\\u1F1D': '\\u1F15', '\\u1F28': '\\u1F20', '\\u1F29': '\\u1F21', '\\u1F2A': '\\u1F22', '\\u1F2B': '\\u1F23', '\\u1F2C': '\\u1F24', '\\u1F2D': '\\u1F25', '\\u1F2E': '\\u1F26', '\\u1F2F': '\\u1F27', '\\u1F38': '\\u1F30', '\\u1F39': '\\u1F31', '\\u1F3A': '\\u1F32', '\\u1F3B': '\\u1F33', '\\u1F3C': '\\u1F34', '\\u1F3D': '\\u1F35', '\\u1F3E': '\\u1F36', '\\u1F3F': '\\u1F37', '\\u1F48': '\\u1F40', '\\u1F49': '\\u1F41', '\\u1F4A': '\\u1F42', '\\u1F4B': '\\u1F43', '\\u1F4C': '\\u1F44', '\\u1F4D': '\\u1F45', '\\u1F59': '\\u1F51', '\\u1F5B': '\\u1F53', '\\u1F5D': '\\u1F55', '\\u1F5F': '\\u1F57', '\\u1F68': '\\u1F60', '\\u1F69': '\\u1F61', '\\u1F6A': '\\u1F62', '\\u1F6B': '\\u1F63', '\\u1F6C': '\\u1F64', '\\u1F6D': '\\u1F65', '\\u1F6E': '\\u1F66', '\\u1F6F': '\\u1F67', '\\u1FB8': '\\u1FB0', '\\u1FB9': '\\u1FB1', '\\u1FBA': '\\u1F70', '\\u1FBB': '\\u1F71', '\\u1FBE': '\\u03B9', '\\u1FC8': '\\u1F72', '\\u1FC9': '\\u1F73', '\\u1FCA': '\\u1F74', '\\u1FCB': '\\u1F75', '\\u1FD8': '\\u1FD0', '\\u1FD9': '\\u1FD1', '\\u1FDA': '\\u1F76', '\\u1FDB': '\\u1F77', '\\u1FE8': '\\u1FE0', '\\u1FE9': '\\u1FE1', '\\u1FEA': '\\u1F7A', '\\u1FEB': '\\u1F7B', '\\u1FEC': '\\u1FE5', '\\u1FF8': '\\u1F78', '\\u1FF9': '\\u1F79', '\\u1FFA': '\\u1F7C', '\\u1FFB': '\\u1F7D', '\\u2126': '\\u03C9', '\\u212A': 'k', '\\u212B': '\\xE5', '\\u2132': '\\u214E', '\\u2160': '\\u2170', '\\u2161': '\\u2171', '\\u2162': '\\u2172', '\\u2163': '\\u2173', '\\u2164': '\\u2174', '\\u2165': '\\u2175', '\\u2166': '\\u2176', '\\u2167': '\\u2177', '\\u2168': '\\u2178', '\\u2169': '\\u2179', '\\u216A': '\\u217A', '\\u216B': '\\u217B', '\\u216C': '\\u217C', '\\u216D': '\\u217D', '\\u216E': '\\u217E', '\\u216F': '\\u217F', '\\u2183': '\\u2184', '\\u24B6': '\\u24D0', '\\u24B7': '\\u24D1', '\\u24B8': '\\u24D2', '\\u24B9': '\\u24D3', '\\u24BA': '\\u24D4', '\\u24BB': '\\u24D5', '\\u24BC': '\\u24D6', '\\u24BD': '\\u24D7', '\\u24BE': '\\u24D8', '\\u24BF': '\\u24D9', '\\u24C0': '\\u24DA', '\\u24C1': '\\u24DB', '\\u24C2': '\\u24DC', '\\u24C3': '\\u24DD', '\\u24C4': '\\u24DE', '\\u24C5': '\\u24DF', '\\u24C6': '\\u24E0', '\\u24C7': '\\u24E1', '\\u24C8': '\\u24E2', '\\u24C9': '\\u24E3', '\\u24CA': '\\u24E4', '\\u24CB': '\\u24E5', '\\u24CC': '\\u24E6', '\\u24CD': '\\u24E7', '\\u24CE': '\\u24E8', '\\u24CF': '\\u24E9', '\\u2C00': '\\u2C30', '\\u2C01': '\\u2C31', '\\u2C02': '\\u2C32', '\\u2C03': '\\u2C33', '\\u2C04': '\\u2C34', '\\u2C05': '\\u2C35', '\\u2C06': '\\u2C36', '\\u2C07': '\\u2C37', '\\u2C08': '\\u2C38', '\\u2C09': '\\u2C39', '\\u2C0A': '\\u2C3A', '\\u2C0B': '\\u2C3B', '\\u2C0C': '\\u2C3C', '\\u2C0D': '\\u2C3D', '\\u2C0E': '\\u2C3E', '\\u2C0F': '\\u2C3F', '\\u2C10': '\\u2C40', '\\u2C11': '\\u2C41', '\\u2C12': '\\u2C42', '\\u2C13': '\\u2C43', '\\u2C14': '\\u2C44', '\\u2C15': '\\u2C45', '\\u2C16': '\\u2C46', '\\u2C17': '\\u2C47', '\\u2C18': '\\u2C48', '\\u2C19': '\\u2C49', '\\u2C1A': '\\u2C4A', '\\u2C1B': '\\u2C4B', '\\u2C1C': '\\u2C4C', '\\u2C1D': '\\u2C4D', '\\u2C1E': '\\u2C4E', '\\u2C1F': '\\u2C4F', '\\u2C20': '\\u2C50', '\\u2C21': '\\u2C51', '\\u2C22': '\\u2C52', '\\u2C23': '\\u2C53', '\\u2C24': '\\u2C54', '\\u2C25': '\\u2C55', '\\u2C26': '\\u2C56', '\\u2C27': '\\u2C57', '\\u2C28': '\\u2C58', '\\u2C29': '\\u2C59', '\\u2C2A': '\\u2C5A', '\\u2C2B': '\\u2C5B', '\\u2C2C': '\\u2C5C', '\\u2C2D': '\\u2C5D', '\\u2C2E': '\\u2C5E', '\\u2C60': '\\u2C61', '\\u2C62': '\\u026B', '\\u2C63': '\\u1D7D', '\\u2C64': '\\u027D', '\\u2C67': '\\u2C68', '\\u2C69': '\\u2C6A', '\\u2C6B': '\\u2C6C', '\\u2C6D': '\\u0251', '\\u2C6E': '\\u0271', '\\u2C6F': '\\u0250', '\\u2C70': '\\u0252', '\\u2C72': '\\u2C73', '\\u2C75': '\\u2C76', '\\u2C7E': '\\u023F', '\\u2C7F': '\\u0240', '\\u2C80': '\\u2C81', '\\u2C82': '\\u2C83', '\\u2C84': '\\u2C85', '\\u2C86': '\\u2C87', '\\u2C88': '\\u2C89', '\\u2C8A': '\\u2C8B', '\\u2C8C': '\\u2C8D', '\\u2C8E': '\\u2C8F', '\\u2C90': '\\u2C91', '\\u2C92': '\\u2C93', '\\u2C94': '\\u2C95', '\\u2C96': '\\u2C97', '\\u2C98': '\\u2C99', '\\u2C9A': '\\u2C9B', '\\u2C9C': '\\u2C9D', '\\u2C9E': '\\u2C9F', '\\u2CA0': '\\u2CA1', '\\u2CA2': '\\u2CA3', '\\u2CA4': '\\u2CA5', '\\u2CA6': '\\u2CA7', '\\u2CA8': '\\u2CA9', '\\u2CAA': '\\u2CAB', '\\u2CAC': '\\u2CAD', '\\u2CAE': '\\u2CAF', '\\u2CB0': '\\u2CB1', '\\u2CB2': '\\u2CB3', '\\u2CB4': '\\u2CB5', '\\u2CB6': '\\u2CB7', '\\u2CB8': '\\u2CB9', '\\u2CBA': '\\u2CBB', '\\u2CBC': '\\u2CBD', '\\u2CBE': '\\u2CBF', '\\u2CC0': '\\u2CC1', '\\u2CC2': '\\u2CC3', '\\u2CC4': '\\u2CC5', '\\u2CC6': '\\u2CC7', '\\u2CC8': '\\u2CC9', '\\u2CCA': '\\u2CCB', '\\u2CCC': '\\u2CCD', '\\u2CCE': '\\u2CCF', '\\u2CD0': '\\u2CD1', '\\u2CD2': '\\u2CD3', '\\u2CD4': '\\u2CD5', '\\u2CD6': '\\u2CD7', '\\u2CD8': '\\u2CD9', '\\u2CDA': '\\u2CDB', '\\u2CDC': '\\u2CDD', '\\u2CDE': '\\u2CDF', '\\u2CE0': '\\u2CE1', '\\u2CE2': '\\u2CE3', '\\u2CEB': '\\u2CEC', '\\u2CED': '\\u2CEE', '\\u2CF2': '\\u2CF3', '\\uA640': '\\uA641', '\\uA642': '\\uA643', '\\uA644': '\\uA645', '\\uA646': '\\uA647', '\\uA648': '\\uA649', '\\uA64A': '\\uA64B', '\\uA64C': '\\uA64D', '\\uA64E': '\\uA64F', '\\uA650': '\\uA651', '\\uA652': '\\uA653', '\\uA654': '\\uA655', '\\uA656': '\\uA657', '\\uA658': '\\uA659', '\\uA65A': '\\uA65B', '\\uA65C': '\\uA65D', '\\uA65E': '\\uA65F', '\\uA660': '\\uA661', '\\uA662': '\\uA663', '\\uA664': '\\uA665', '\\uA666': '\\uA667', '\\uA668': '\\uA669', '\\uA66A': '\\uA66B', '\\uA66C': '\\uA66D', '\\uA680': '\\uA681', '\\uA682': '\\uA683', '\\uA684': '\\uA685', '\\uA686': '\\uA687', '\\uA688': '\\uA689', '\\uA68A': '\\uA68B', '\\uA68C': '\\uA68D', '\\uA68E': '\\uA68F', '\\uA690': '\\uA691', '\\uA692': '\\uA693', '\\uA694': '\\uA695', '\\uA696': '\\uA697', '\\uA698': '\\uA699', '\\uA69A': '\\uA69B', '\\uA722': '\\uA723', '\\uA724': '\\uA725', '\\uA726': '\\uA727', '\\uA728': '\\uA729', '\\uA72A': '\\uA72B', '\\uA72C': '\\uA72D', '\\uA72E': '\\uA72F', '\\uA732': '\\uA733', '\\uA734': '\\uA735', '\\uA736': '\\uA737', '\\uA738': '\\uA739', '\\uA73A': '\\uA73B', '\\uA73C': '\\uA73D', '\\uA73E': '\\uA73F', '\\uA740': '\\uA741', '\\uA742': '\\uA743', '\\uA744': '\\uA745', '\\uA746': '\\uA747', '\\uA748': '\\uA749', '\\uA74A': '\\uA74B', '\\uA74C': '\\uA74D', '\\uA74E': '\\uA74F', '\\uA750': '\\uA751', '\\uA752': '\\uA753', '\\uA754': '\\uA755', '\\uA756': '\\uA757', '\\uA758': '\\uA759', '\\uA75A': '\\uA75B', '\\uA75C': '\\uA75D', '\\uA75E': '\\uA75F', '\\uA760': '\\uA761', '\\uA762': '\\uA763', '\\uA764': '\\uA765', '\\uA766': '\\uA767', '\\uA768': '\\uA769', '\\uA76A': '\\uA76B', '\\uA76C': '\\uA76D', '\\uA76E': '\\uA76F', '\\uA779': '\\uA77A', '\\uA77B': '\\uA77C', '\\uA77D': '\\u1D79', '\\uA77E': '\\uA77F', '\\uA780': '\\uA781', '\\uA782': '\\uA783', '\\uA784': '\\uA785', '\\uA786': '\\uA787', '\\uA78B': '\\uA78C', '\\uA78D': '\\u0265', '\\uA790': '\\uA791', '\\uA792': '\\uA793', '\\uA796': '\\uA797', '\\uA798': '\\uA799', '\\uA79A': '\\uA79B', '\\uA79C': '\\uA79D', '\\uA79E': '\\uA79F', '\\uA7A0': '\\uA7A1', '\\uA7A2': '\\uA7A3', '\\uA7A4': '\\uA7A5', '\\uA7A6': '\\uA7A7', '\\uA7A8': '\\uA7A9', '\\uA7AA': '\\u0266', '\\uA7AB': '\\u025C', '\\uA7AC': '\\u0261', '\\uA7AD': '\\u026C', '\\uA7B0': '\\u029E', '\\uA7B1': '\\u0287', '\\uFF21': '\\uFF41', '\\uFF22': '\\uFF42', '\\uFF23': '\\uFF43', '\\uFF24': '\\uFF44', '\\uFF25': '\\uFF45', '\\uFF26': '\\uFF46', '\\uFF27': '\\uFF47', '\\uFF28': '\\uFF48', '\\uFF29': '\\uFF49', '\\uFF2A': '\\uFF4A', '\\uFF2B': '\\uFF4B', '\\uFF2C': '\\uFF4C', '\\uFF2D': '\\uFF4D', '\\uFF2E': '\\uFF4E', '\\uFF2F': '\\uFF4F', '\\uFF30': '\\uFF50', '\\uFF31': '\\uFF51', '\\uFF32': '\\uFF52', '\\uFF33': '\\uFF53', '\\uFF34': '\\uFF54', '\\uFF35': '\\uFF55', '\\uFF36': '\\uFF56', '\\uFF37': '\\uFF57', '\\uFF38': '\\uFF58', '\\uFF39': '\\uFF59', '\\uFF3A': '\\uFF5A', '\\uD801\\uDC00': '\\uD801\\uDC28', '\\uD801\\uDC01': '\\uD801\\uDC29', '\\uD801\\uDC02': '\\uD801\\uDC2A', '\\uD801\\uDC03': '\\uD801\\uDC2B', '\\uD801\\uDC04': '\\uD801\\uDC2C', '\\uD801\\uDC05': '\\uD801\\uDC2D', '\\uD801\\uDC06': '\\uD801\\uDC2E', '\\uD801\\uDC07': '\\uD801\\uDC2F', '\\uD801\\uDC08': '\\uD801\\uDC30', '\\uD801\\uDC09': '\\uD801\\uDC31', '\\uD801\\uDC0A': '\\uD801\\uDC32', '\\uD801\\uDC0B': '\\uD801\\uDC33', '\\uD801\\uDC0C': '\\uD801\\uDC34', '\\uD801\\uDC0D': '\\uD801\\uDC35', '\\uD801\\uDC0E': '\\uD801\\uDC36', '\\uD801\\uDC0F': '\\uD801\\uDC37', '\\uD801\\uDC10': '\\uD801\\uDC38', '\\uD801\\uDC11': '\\uD801\\uDC39', '\\uD801\\uDC12': '\\uD801\\uDC3A', '\\uD801\\uDC13': '\\uD801\\uDC3B', '\\uD801\\uDC14': '\\uD801\\uDC3C', '\\uD801\\uDC15': '\\uD801\\uDC3D', '\\uD801\\uDC16': '\\uD801\\uDC3E', '\\uD801\\uDC17': '\\uD801\\uDC3F', '\\uD801\\uDC18': '\\uD801\\uDC40', '\\uD801\\uDC19': '\\uD801\\uDC41', '\\uD801\\uDC1A': '\\uD801\\uDC42', '\\uD801\\uDC1B': '\\uD801\\uDC43', '\\uD801\\uDC1C': '\\uD801\\uDC44', '\\uD801\\uDC1D': '\\uD801\\uDC45', '\\uD801\\uDC1E': '\\uD801\\uDC46', '\\uD801\\uDC1F': '\\uD801\\uDC47', '\\uD801\\uDC20': '\\uD801\\uDC48', '\\uD801\\uDC21': '\\uD801\\uDC49', '\\uD801\\uDC22': '\\uD801\\uDC4A', '\\uD801\\uDC23': '\\uD801\\uDC4B', '\\uD801\\uDC24': '\\uD801\\uDC4C', '\\uD801\\uDC25': '\\uD801\\uDC4D', '\\uD801\\uDC26': '\\uD801\\uDC4E', '\\uD801\\uDC27': '\\uD801\\uDC4F', '\\uD806\\uDCA0': '\\uD806\\uDCC0', '\\uD806\\uDCA1': '\\uD806\\uDCC1', '\\uD806\\uDCA2': '\\uD806\\uDCC2', '\\uD806\\uDCA3': '\\uD806\\uDCC3', '\\uD806\\uDCA4': '\\uD806\\uDCC4', '\\uD806\\uDCA5': '\\uD806\\uDCC5', '\\uD806\\uDCA6': '\\uD806\\uDCC6', '\\uD806\\uDCA7': '\\uD806\\uDCC7', '\\uD806\\uDCA8': '\\uD806\\uDCC8', '\\uD806\\uDCA9': '\\uD806\\uDCC9', '\\uD806\\uDCAA': '\\uD806\\uDCCA', '\\uD806\\uDCAB': '\\uD806\\uDCCB', '\\uD806\\uDCAC': '\\uD806\\uDCCC', '\\uD806\\uDCAD': '\\uD806\\uDCCD', '\\uD806\\uDCAE': '\\uD806\\uDCCE', '\\uD806\\uDCAF': '\\uD806\\uDCCF', '\\uD806\\uDCB0': '\\uD806\\uDCD0', '\\uD806\\uDCB1': '\\uD806\\uDCD1', '\\uD806\\uDCB2': '\\uD806\\uDCD2', '\\uD806\\uDCB3': '\\uD806\\uDCD3', '\\uD806\\uDCB4': '\\uD806\\uDCD4', '\\uD806\\uDCB5': '\\uD806\\uDCD5', '\\uD806\\uDCB6': '\\uD806\\uDCD6', '\\uD806\\uDCB7': '\\uD806\\uDCD7', '\\uD806\\uDCB8': '\\uD806\\uDCD8', '\\uD806\\uDCB9': '\\uD806\\uDCD9', '\\uD806\\uDCBA': '\\uD806\\uDCDA', '\\uD806\\uDCBB': '\\uD806\\uDCDB', '\\uD806\\uDCBC': '\\uD806\\uDCDC', '\\uD806\\uDCBD': '\\uD806\\uDCDD', '\\uD806\\uDCBE': '\\uD806\\uDCDE', '\\uD806\\uDCBF': '\\uD806\\uDCDF', '\\xDF': 'ss', '\\u0130': 'i\\u0307', '\\u0149': '\\u02BCn', '\\u01F0': 'j\\u030C', '\\u0390': '\\u03B9\\u0308\\u0301', '\\u03B0': '\\u03C5\\u0308\\u0301', '\\u0587': '\\u0565\\u0582', '\\u1E96': 'h\\u0331', '\\u1E97': 't\\u0308', '\\u1E98': 'w\\u030A', '\\u1E99': 'y\\u030A', '\\u1E9A': 'a\\u02BE', '\\u1E9E': 'ss', '\\u1F50': '\\u03C5\\u0313', '\\u1F52': '\\u03C5\\u0313\\u0300', '\\u1F54': '\\u03C5\\u0313\\u0301', '\\u1F56': '\\u03C5\\u0313\\u0342', '\\u1F80': '\\u1F00\\u03B9', '\\u1F81': '\\u1F01\\u03B9', '\\u1F82': '\\u1F02\\u03B9', '\\u1F83': '\\u1F03\\u03B9', '\\u1F84': '\\u1F04\\u03B9', '\\u1F85': '\\u1F05\\u03B9', '\\u1F86': '\\u1F06\\u03B9', '\\u1F87': '\\u1F07\\u03B9', '\\u1F88': '\\u1F00\\u03B9', '\\u1F89': '\\u1F01\\u03B9', '\\u1F8A': '\\u1F02\\u03B9', '\\u1F8B': '\\u1F03\\u03B9', '\\u1F8C': '\\u1F04\\u03B9', '\\u1F8D': '\\u1F05\\u03B9', '\\u1F8E': '\\u1F06\\u03B9', '\\u1F8F': '\\u1F07\\u03B9', '\\u1F90': '\\u1F20\\u03B9', '\\u1F91': '\\u1F21\\u03B9', '\\u1F92': '\\u1F22\\u03B9', '\\u1F93': '\\u1F23\\u03B9', '\\u1F94': '\\u1F24\\u03B9', '\\u1F95': '\\u1F25\\u03B9', '\\u1F96': '\\u1F26\\u03B9', '\\u1F97': '\\u1F27\\u03B9', '\\u1F98': '\\u1F20\\u03B9', '\\u1F99': '\\u1F21\\u03B9', '\\u1F9A': '\\u1F22\\u03B9', '\\u1F9B': '\\u1F23\\u03B9', '\\u1F9C': '\\u1F24\\u03B9', '\\u1F9D': '\\u1F25\\u03B9', '\\u1F9E': '\\u1F26\\u03B9', '\\u1F9F': '\\u1F27\\u03B9', '\\u1FA0': '\\u1F60\\u03B9', '\\u1FA1': '\\u1F61\\u03B9', '\\u1FA2': '\\u1F62\\u03B9', '\\u1FA3': '\\u1F63\\u03B9', '\\u1FA4': '\\u1F64\\u03B9', '\\u1FA5': '\\u1F65\\u03B9', '\\u1FA6': '\\u1F66\\u03B9', '\\u1FA7': '\\u1F67\\u03B9', '\\u1FA8': '\\u1F60\\u03B9', '\\u1FA9': '\\u1F61\\u03B9', '\\u1FAA': '\\u1F62\\u03B9', '\\u1FAB': '\\u1F63\\u03B9', '\\u1FAC': '\\u1F64\\u03B9', '\\u1FAD': '\\u1F65\\u03B9', '\\u1FAE': '\\u1F66\\u03B9', '\\u1FAF': '\\u1F67\\u03B9', '\\u1FB2': '\\u1F70\\u03B9', '\\u1FB3': '\\u03B1\\u03B9', '\\u1FB4': '\\u03AC\\u03B9', '\\u1FB6': '\\u03B1\\u0342', '\\u1FB7': '\\u03B1\\u0342\\u03B9', '\\u1FBC': '\\u03B1\\u03B9', '\\u1FC2': '\\u1F74\\u03B9', '\\u1FC3': '\\u03B7\\u03B9', '\\u1FC4': '\\u03AE\\u03B9', '\\u1FC6': '\\u03B7\\u0342', '\\u1FC7': '\\u03B7\\u0342\\u03B9', '\\u1FCC': '\\u03B7\\u03B9', '\\u1FD2': '\\u03B9\\u0308\\u0300', '\\u1FD3': '\\u03B9\\u0308\\u0301', '\\u1FD6': '\\u03B9\\u0342', '\\u1FD7': '\\u03B9\\u0308\\u0342', '\\u1FE2': '\\u03C5\\u0308\\u0300', '\\u1FE3': '\\u03C5\\u0308\\u0301', '\\u1FE4': '\\u03C1\\u0313', '\\u1FE6': '\\u03C5\\u0342', '\\u1FE7': '\\u03C5\\u0308\\u0342', '\\u1FF2': '\\u1F7C\\u03B9', '\\u1FF3': '\\u03C9\\u03B9', '\\u1FF4': '\\u03CE\\u03B9', '\\u1FF6': '\\u03C9\\u0342', '\\u1FF7': '\\u03C9\\u0342\\u03B9', '\\u1FFC': '\\u03C9\\u03B9', '\\uFB00': 'ff', '\\uFB01': 'fi', '\\uFB02': 'fl', '\\uFB03': 'ffi', '\\uFB04': 'ffl', '\\uFB05': 'st', '\\uFB06': 'st', '\\uFB13': '\\u0574\\u0576', '\\uFB14': '\\u0574\\u0565', '\\uFB15': '\\u0574\\u056B', '\\uFB16': '\\u057E\\u0576', '\\uFB17': '\\u0574\\u056D' };\n\n// Normalize reference label: collapse internal whitespace\n// to single space, remove leading/trailing whitespace, case fold.\nexport function normalizeReference(s: string): string {\n    return s.slice(1, s.length - 1).trim().replace(regex, function ($0) {\n        // Note: there is no need to check `hasOwnProperty($0)` here.\n        // If character not found in lookup table, it must be whitespace.\n        return map[$0] || ' ';\n    });\n}\n","\nimport { encode } from './encode';\nimport { decode } from './decode';\n\nconst C_BACKSLASH = 92;\n\nimport { decodeHTML } from './entities';\n\nexport const ENTITY = \"&(?:#x[a-f0-9]{1,8}|#[0-9]{1,8}|[a-z][a-z0-9]{1,31});\";\n\nconst TAGNAME = '[A-Za-z][A-Za-z0-9-]*';\nconst ATTRIBUTENAME = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\nconst UNQUOTEDVALUE = \"[^\\\"'=<>`\\\\x00-\\\\x20]+\";\nconst SINGLEQUOTEDVALUE = \"'[^']*'\";\nconst DOUBLEQUOTEDVALUE = '\"[^\"]*\"';\nconst ATTRIBUTEVALUE = \"(?:\" + UNQUOTEDVALUE + \"|\" + SINGLEQUOTEDVALUE + \"|\" + DOUBLEQUOTEDVALUE + \")\";\nconst ATTRIBUTEVALUESPEC = \"(?:\" + \"\\\\s*=\" + \"\\\\s*\" + ATTRIBUTEVALUE + \")\";\nconst ATTRIBUTE = \"(?:\" + \"\\\\s+\" + ATTRIBUTENAME + ATTRIBUTEVALUESPEC + \"?)\";\nexport const OPENTAG = \"<\" + TAGNAME + ATTRIBUTE + \"*\" + \"\\\\s*/?>\";\nexport const CLOSETAG = \"</\" + TAGNAME + \"\\\\s*[>]\";\nconst HTMLCOMMENT = \"<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->\";\nconst PROCESSINGINSTRUCTION = \"[<][?].*?[?][>]\";\nconst DECLARATION = \"<![A-Z]+\" + \"\\\\s+[^>]*>\";\nconst CDATA = \"<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\";\nconst HTMLTAG = \"(?:\" + OPENTAG + \"|\" + CLOSETAG + \"|\" + HTMLCOMMENT + \"|\" + PROCESSINGINSTRUCTION + \"|\" + DECLARATION + \"|\" + CDATA + \")\";\nexport const reHtmlTag = new RegExp('^' + HTMLTAG, 'i');\n\nconst reBackslashOrAmp = /[\\\\&]/;\n\nexport const ESCAPABLE = '[!\"#$%&\\'()*+,./:;<=>?@[\\\\\\\\\\\\]^_`{|}~-]';\n\nconst reEntityOrEscapedChar = new RegExp('\\\\\\\\' + ESCAPABLE + '|' + ENTITY, 'gi');\n\nconst XMLSPECIAL = '[&<>\"]';\n\nconst reXmlSpecial = new RegExp(XMLSPECIAL, 'g');\n\nconst reXmlSpecialOrEntity = new RegExp(ENTITY + '|' + XMLSPECIAL, 'gi');\n\nconst unescapeChar = function (s: string) {\n    if (s.charCodeAt(0) === C_BACKSLASH) {\n        return s.charAt(1);\n    }\n    else {\n        return decodeHTML(s);\n    }\n};\n\n// Replace entities and backslash escapes with literal characters.\nexport const unescapeString = function (s: string) {\n    if (reBackslashOrAmp.test(s)) {\n        return s.replace(reEntityOrEscapedChar, unescapeChar);\n    } else {\n        return s;\n    }\n};\n\nexport const normalizeURI = function (uri: string) {\n    try {\n        return encode(decode(uri));\n    }\n    catch (err) {\n        return uri;\n    }\n};\n\nconst replaceUnsafeChar = function (s: string) {\n    switch (s) {\n        case '&':\n            return '&amp;';\n        case '<':\n            return '&lt;';\n        case '>':\n            return '&gt;';\n        case '\"':\n            return '&quot;';\n        default:\n            return s;\n    }\n};\n\nexport const escapeXml = function (s: string, preserve_entities: boolean) {\n    if (reXmlSpecial.test(s)) {\n        if (preserve_entities) {\n            return s.replace(reXmlSpecialOrEntity, replaceUnsafeChar);\n        } else {\n            return s.replace(reXmlSpecial, replaceUnsafeChar);\n        }\n    } else {\n        return s;\n    }\n};\n","const legacyMap = { \"Aacute\": \"\\u00C1\", \"aacute\": \"\\u00E1\", \"Acirc\": \"\\u00C2\", \"acirc\": \"\\u00E2\", \"acute\": \"\\u00B4\", \"AElig\": \"\\u00C6\", \"aelig\": \"\\u00E6\", \"Agrave\": \"\\u00C0\", \"agrave\": \"\\u00E0\", \"amp\": \"&\", \"AMP\": \"&\", \"Aring\": \"\\u00C5\", \"aring\": \"\\u00E5\", \"Atilde\": \"\\u00C3\", \"atilde\": \"\\u00E3\", \"Auml\": \"\\u00C4\", \"auml\": \"\\u00E4\", \"brvbar\": \"\\u00A6\", \"Ccedil\": \"\\u00C7\", \"ccedil\": \"\\u00E7\", \"cedil\": \"\\u00B8\", \"cent\": \"\\u00A2\", \"copy\": \"\\u00A9\", \"COPY\": \"\\u00A9\", \"curren\": \"\\u00A4\", \"deg\": \"\\u00B0\", \"divide\": \"\\u00F7\", \"Eacute\": \"\\u00C9\", \"eacute\": \"\\u00E9\", \"Ecirc\": \"\\u00CA\", \"ecirc\": \"\\u00EA\", \"Egrave\": \"\\u00C8\", \"egrave\": \"\\u00E8\", \"ETH\": \"\\u00D0\", \"eth\": \"\\u00F0\", \"Euml\": \"\\u00CB\", \"euml\": \"\\u00EB\", \"frac12\": \"\\u00BD\", \"frac14\": \"\\u00BC\", \"frac34\": \"\\u00BE\", \"gt\": \">\", \"GT\": \">\", \"Iacute\": \"\\u00CD\", \"iacute\": \"\\u00ED\", \"Icirc\": \"\\u00CE\", \"icirc\": \"\\u00EE\", \"iexcl\": \"\\u00A1\", \"Igrave\": \"\\u00CC\", \"igrave\": \"\\u00EC\", \"iquest\": \"\\u00BF\", \"Iuml\": \"\\u00CF\", \"iuml\": \"\\u00EF\", \"laquo\": \"\\u00AB\", \"lt\": \"<\", \"LT\": \"<\", \"macr\": \"\\u00AF\", \"micro\": \"\\u00B5\", \"middot\": \"\\u00B7\", \"nbsp\": \"\\u00A0\", \"not\": \"\\u00AC\", \"Ntilde\": \"\\u00D1\", \"ntilde\": \"\\u00F1\", \"Oacute\": \"\\u00D3\", \"oacute\": \"\\u00F3\", \"Ocirc\": \"\\u00D4\", \"ocirc\": \"\\u00F4\", \"Ograve\": \"\\u00D2\", \"ograve\": \"\\u00F2\", \"ordf\": \"\\u00AA\", \"ordm\": \"\\u00BA\", \"Oslash\": \"\\u00D8\", \"oslash\": \"\\u00F8\", \"Otilde\": \"\\u00D5\", \"otilde\": \"\\u00F5\", \"Ouml\": \"\\u00D6\", \"ouml\": \"\\u00F6\", \"para\": \"\\u00B6\", \"plusmn\": \"\\u00B1\", \"pound\": \"\\u00A3\", \"quot\": \"\\\"\", \"QUOT\": \"\\\"\", \"raquo\": \"\\u00BB\", \"reg\": \"\\u00AE\", \"REG\": \"\\u00AE\", \"sect\": \"\\u00A7\", \"shy\": \"\\u00AD\", \"sup1\": \"\\u00B9\", \"sup2\": \"\\u00B2\", \"sup3\": \"\\u00B3\", \"szlig\": \"\\u00DF\", \"THORN\": \"\\u00DE\", \"thorn\": \"\\u00FE\", \"times\": \"\\u00D7\", \"Uacute\": \"\\u00DA\", \"uacute\": \"\\u00FA\", \"Ucirc\": \"\\u00DB\", \"ucirc\": \"\\u00FB\", \"Ugrave\": \"\\u00D9\", \"ugrave\": \"\\u00F9\", \"uml\": \"\\u00A8\", \"Uuml\": \"\\u00DC\", \"uuml\": \"\\u00FC\", \"Yacute\": \"\\u00DD\", \"yacute\": \"\\u00FD\", \"yen\": \"\\u00A5\", \"yuml\": \"\\u00FF\" };\n\nconst entityMap = { \"Aacute\": \"\\u00C1\", \"aacute\": \"\\u00E1\", \"Abreve\": \"\\u0102\", \"abreve\": \"\\u0103\", \"ac\": \"\\u223E\", \"acd\": \"\\u223F\", \"acE\": \"\\u223E\\u0333\", \"Acirc\": \"\\u00C2\", \"acirc\": \"\\u00E2\", \"acute\": \"\\u00B4\", \"Acy\": \"\\u0410\", \"acy\": \"\\u0430\", \"AElig\": \"\\u00C6\", \"aelig\": \"\\u00E6\", \"af\": \"\\u2061\", \"Afr\": \"\\uD835\\uDD04\", \"afr\": \"\\uD835\\uDD1E\", \"Agrave\": \"\\u00C0\", \"agrave\": \"\\u00E0\", \"alefsym\": \"\\u2135\", \"aleph\": \"\\u2135\", \"Alpha\": \"\\u0391\", \"alpha\": \"\\u03B1\", \"Amacr\": \"\\u0100\", \"amacr\": \"\\u0101\", \"amalg\": \"\\u2A3F\", \"amp\": \"&\", \"AMP\": \"&\", \"andand\": \"\\u2A55\", \"And\": \"\\u2A53\", \"and\": \"\\u2227\", \"andd\": \"\\u2A5C\", \"andslope\": \"\\u2A58\", \"andv\": \"\\u2A5A\", \"ang\": \"\\u2220\", \"ange\": \"\\u29A4\", \"angle\": \"\\u2220\", \"angmsdaa\": \"\\u29A8\", \"angmsdab\": \"\\u29A9\", \"angmsdac\": \"\\u29AA\", \"angmsdad\": \"\\u29AB\", \"angmsdae\": \"\\u29AC\", \"angmsdaf\": \"\\u29AD\", \"angmsdag\": \"\\u29AE\", \"angmsdah\": \"\\u29AF\", \"angmsd\": \"\\u2221\", \"angrt\": \"\\u221F\", \"angrtvb\": \"\\u22BE\", \"angrtvbd\": \"\\u299D\", \"angsph\": \"\\u2222\", \"angst\": \"\\u00C5\", \"angzarr\": \"\\u237C\", \"Aogon\": \"\\u0104\", \"aogon\": \"\\u0105\", \"Aopf\": \"\\uD835\\uDD38\", \"aopf\": \"\\uD835\\uDD52\", \"apacir\": \"\\u2A6F\", \"ap\": \"\\u2248\", \"apE\": \"\\u2A70\", \"ape\": \"\\u224A\", \"apid\": \"\\u224B\", \"apos\": \"'\", \"ApplyFunction\": \"\\u2061\", \"approx\": \"\\u2248\", \"approxeq\": \"\\u224A\", \"Aring\": \"\\u00C5\", \"aring\": \"\\u00E5\", \"Ascr\": \"\\uD835\\uDC9C\", \"ascr\": \"\\uD835\\uDCB6\", \"Assign\": \"\\u2254\", \"ast\": \"*\", \"asymp\": \"\\u2248\", \"asympeq\": \"\\u224D\", \"Atilde\": \"\\u00C3\", \"atilde\": \"\\u00E3\", \"Auml\": \"\\u00C4\", \"auml\": \"\\u00E4\", \"awconint\": \"\\u2233\", \"awint\": \"\\u2A11\", \"backcong\": \"\\u224C\", \"backepsilon\": \"\\u03F6\", \"backprime\": \"\\u2035\", \"backsim\": \"\\u223D\", \"backsimeq\": \"\\u22CD\", \"Backslash\": \"\\u2216\", \"Barv\": \"\\u2AE7\", \"barvee\": \"\\u22BD\", \"barwed\": \"\\u2305\", \"Barwed\": \"\\u2306\", \"barwedge\": \"\\u2305\", \"bbrk\": \"\\u23B5\", \"bbrktbrk\": \"\\u23B6\", \"bcong\": \"\\u224C\", \"Bcy\": \"\\u0411\", \"bcy\": \"\\u0431\", \"bdquo\": \"\\u201E\", \"becaus\": \"\\u2235\", \"because\": \"\\u2235\", \"Because\": \"\\u2235\", \"bemptyv\": \"\\u29B0\", \"bepsi\": \"\\u03F6\", \"bernou\": \"\\u212C\", \"Bernoullis\": \"\\u212C\", \"Beta\": \"\\u0392\", \"beta\": \"\\u03B2\", \"beth\": \"\\u2136\", \"between\": \"\\u226C\", \"Bfr\": \"\\uD835\\uDD05\", \"bfr\": \"\\uD835\\uDD1F\", \"bigcap\": \"\\u22C2\", \"bigcirc\": \"\\u25EF\", \"bigcup\": \"\\u22C3\", \"bigodot\": \"\\u2A00\", \"bigoplus\": \"\\u2A01\", \"bigotimes\": \"\\u2A02\", \"bigsqcup\": \"\\u2A06\", \"bigstar\": \"\\u2605\", \"bigtriangledown\": \"\\u25BD\", \"bigtriangleup\": \"\\u25B3\", \"biguplus\": \"\\u2A04\", \"bigvee\": \"\\u22C1\", \"bigwedge\": \"\\u22C0\", \"bkarow\": \"\\u290D\", \"blacklozenge\": \"\\u29EB\", \"blacksquare\": \"\\u25AA\", \"blacktriangle\": \"\\u25B4\", \"blacktriangledown\": \"\\u25BE\", \"blacktriangleleft\": \"\\u25C2\", \"blacktriangleright\": \"\\u25B8\", \"blank\": \"\\u2423\", \"blk12\": \"\\u2592\", \"blk14\": \"\\u2591\", \"blk34\": \"\\u2593\", \"block\": \"\\u2588\", \"bne\": \"=\\u20E5\", \"bnequiv\": \"\\u2261\\u20E5\", \"bNot\": \"\\u2AED\", \"bnot\": \"\\u2310\", \"Bopf\": \"\\uD835\\uDD39\", \"bopf\": \"\\uD835\\uDD53\", \"bot\": \"\\u22A5\", \"bottom\": \"\\u22A5\", \"bowtie\": \"\\u22C8\", \"boxbox\": \"\\u29C9\", \"boxdl\": \"\\u2510\", \"boxdL\": \"\\u2555\", \"boxDl\": \"\\u2556\", \"boxDL\": \"\\u2557\", \"boxdr\": \"\\u250C\", \"boxdR\": \"\\u2552\", \"boxDr\": \"\\u2553\", \"boxDR\": \"\\u2554\", \"boxh\": \"\\u2500\", \"boxH\": \"\\u2550\", \"boxhd\": \"\\u252C\", \"boxHd\": \"\\u2564\", \"boxhD\": \"\\u2565\", \"boxHD\": \"\\u2566\", \"boxhu\": \"\\u2534\", \"boxHu\": \"\\u2567\", \"boxhU\": \"\\u2568\", \"boxHU\": \"\\u2569\", \"boxminus\": \"\\u229F\", \"boxplus\": \"\\u229E\", \"boxtimes\": \"\\u22A0\", \"boxul\": \"\\u2518\", \"boxuL\": \"\\u255B\", \"boxUl\": \"\\u255C\", \"boxUL\": \"\\u255D\", \"boxur\": \"\\u2514\", \"boxuR\": \"\\u2558\", \"boxUr\": \"\\u2559\", \"boxUR\": \"\\u255A\", \"boxv\": \"\\u2502\", \"boxV\": \"\\u2551\", \"boxvh\": \"\\u253C\", \"boxvH\": \"\\u256A\", \"boxVh\": \"\\u256B\", \"boxVH\": \"\\u256C\", \"boxvl\": \"\\u2524\", \"boxvL\": \"\\u2561\", \"boxVl\": \"\\u2562\", \"boxVL\": \"\\u2563\", \"boxvr\": \"\\u251C\", \"boxvR\": \"\\u255E\", \"boxVr\": \"\\u255F\", \"boxVR\": \"\\u2560\", \"bprime\": \"\\u2035\", \"breve\": \"\\u02D8\", \"Breve\": \"\\u02D8\", \"brvbar\": \"\\u00A6\", \"bscr\": \"\\uD835\\uDCB7\", \"Bscr\": \"\\u212C\", \"bsemi\": \"\\u204F\", \"bsim\": \"\\u223D\", \"bsime\": \"\\u22CD\", \"bsolb\": \"\\u29C5\", \"bsol\": \"\\\\\", \"bsolhsub\": \"\\u27C8\", \"bull\": \"\\u2022\", \"bullet\": \"\\u2022\", \"bump\": \"\\u224E\", \"bumpE\": \"\\u2AAE\", \"bumpe\": \"\\u224F\", \"Bumpeq\": \"\\u224E\", \"bumpeq\": \"\\u224F\", \"Cacute\": \"\\u0106\", \"cacute\": \"\\u0107\", \"capand\": \"\\u2A44\", \"capbrcup\": \"\\u2A49\", \"capcap\": \"\\u2A4B\", \"cap\": \"\\u2229\", \"Cap\": \"\\u22D2\", \"capcup\": \"\\u2A47\", \"capdot\": \"\\u2A40\", \"CapitalDifferentialD\": \"\\u2145\", \"caps\": \"\\u2229\\uFE00\", \"caret\": \"\\u2041\", \"caron\": \"\\u02C7\", \"Cayleys\": \"\\u212D\", \"ccaps\": \"\\u2A4D\", \"Ccaron\": \"\\u010C\", \"ccaron\": \"\\u010D\", \"Ccedil\": \"\\u00C7\", \"ccedil\": \"\\u00E7\", \"Ccirc\": \"\\u0108\", \"ccirc\": \"\\u0109\", \"Cconint\": \"\\u2230\", \"ccups\": \"\\u2A4C\", \"ccupssm\": \"\\u2A50\", \"Cdot\": \"\\u010A\", \"cdot\": \"\\u010B\", \"cedil\": \"\\u00B8\", \"Cedilla\": \"\\u00B8\", \"cemptyv\": \"\\u29B2\", \"cent\": \"\\u00A2\", \"centerdot\": \"\\u00B7\", \"CenterDot\": \"\\u00B7\", \"cfr\": \"\\uD835\\uDD20\", \"Cfr\": \"\\u212D\", \"CHcy\": \"\\u0427\", \"chcy\": \"\\u0447\", \"check\": \"\\u2713\", \"checkmark\": \"\\u2713\", \"Chi\": \"\\u03A7\", \"chi\": \"\\u03C7\", \"circ\": \"\\u02C6\", \"circeq\": \"\\u2257\", \"circlearrowleft\": \"\\u21BA\", \"circlearrowright\": \"\\u21BB\", \"circledast\": \"\\u229B\", \"circledcirc\": \"\\u229A\", \"circleddash\": \"\\u229D\", \"CircleDot\": \"\\u2299\", \"circledR\": \"\\u00AE\", \"circledS\": \"\\u24C8\", \"CircleMinus\": \"\\u2296\", \"CirclePlus\": \"\\u2295\", \"CircleTimes\": \"\\u2297\", \"cir\": \"\\u25CB\", \"cirE\": \"\\u29C3\", \"cire\": \"\\u2257\", \"cirfnint\": \"\\u2A10\", \"cirmid\": \"\\u2AEF\", \"cirscir\": \"\\u29C2\", \"ClockwiseContourIntegral\": \"\\u2232\", \"CloseCurlyDoubleQuote\": \"\\u201D\", \"CloseCurlyQuote\": \"\\u2019\", \"clubs\": \"\\u2663\", \"clubsuit\": \"\\u2663\", \"colon\": \":\", \"Colon\": \"\\u2237\", \"Colone\": \"\\u2A74\", \"colone\": \"\\u2254\", \"coloneq\": \"\\u2254\", \"comma\": \",\", \"commat\": \"@\", \"comp\": \"\\u2201\", \"compfn\": \"\\u2218\", \"complement\": \"\\u2201\", \"complexes\": \"\\u2102\", \"cong\": \"\\u2245\", \"congdot\": \"\\u2A6D\", \"Congruent\": \"\\u2261\", \"conint\": \"\\u222E\", \"Conint\": \"\\u222F\", \"ContourIntegral\": \"\\u222E\", \"copf\": \"\\uD835\\uDD54\", \"Copf\": \"\\u2102\", \"coprod\": \"\\u2210\", \"Coproduct\": \"\\u2210\", \"copy\": \"\\u00A9\", \"COPY\": \"\\u00A9\", \"copysr\": \"\\u2117\", \"CounterClockwiseContourIntegral\": \"\\u2233\", \"crarr\": \"\\u21B5\", \"cross\": \"\\u2717\", \"Cross\": \"\\u2A2F\", \"Cscr\": \"\\uD835\\uDC9E\", \"cscr\": \"\\uD835\\uDCB8\", \"csub\": \"\\u2ACF\", \"csube\": \"\\u2AD1\", \"csup\": \"\\u2AD0\", \"csupe\": \"\\u2AD2\", \"ctdot\": \"\\u22EF\", \"cudarrl\": \"\\u2938\", \"cudarrr\": \"\\u2935\", \"cuepr\": \"\\u22DE\", \"cuesc\": \"\\u22DF\", \"cularr\": \"\\u21B6\", \"cularrp\": \"\\u293D\", \"cupbrcap\": \"\\u2A48\", \"cupcap\": \"\\u2A46\", \"CupCap\": \"\\u224D\", \"cup\": \"\\u222A\", \"Cup\": \"\\u22D3\", \"cupcup\": \"\\u2A4A\", \"cupdot\": \"\\u228D\", \"cupor\": \"\\u2A45\", \"cups\": \"\\u222A\\uFE00\", \"curarr\": \"\\u21B7\", \"curarrm\": \"\\u293C\", \"curlyeqprec\": \"\\u22DE\", \"curlyeqsucc\": \"\\u22DF\", \"curlyvee\": \"\\u22CE\", \"curlywedge\": \"\\u22CF\", \"curren\": \"\\u00A4\", \"curvearrowleft\": \"\\u21B6\", \"curvearrowright\": \"\\u21B7\", \"cuvee\": \"\\u22CE\", \"cuwed\": \"\\u22CF\", \"cwconint\": \"\\u2232\", \"cwint\": \"\\u2231\", \"cylcty\": \"\\u232D\", \"dagger\": \"\\u2020\", \"Dagger\": \"\\u2021\", \"daleth\": \"\\u2138\", \"darr\": \"\\u2193\", \"Darr\": \"\\u21A1\", \"dArr\": \"\\u21D3\", \"dash\": \"\\u2010\", \"Dashv\": \"\\u2AE4\", \"dashv\": \"\\u22A3\", \"dbkarow\": \"\\u290F\", \"dblac\": \"\\u02DD\", \"Dcaron\": \"\\u010E\", \"dcaron\": \"\\u010F\", \"Dcy\": \"\\u0414\", \"dcy\": \"\\u0434\", \"ddagger\": \"\\u2021\", \"ddarr\": \"\\u21CA\", \"DD\": \"\\u2145\", \"dd\": \"\\u2146\", \"DDotrahd\": \"\\u2911\", \"ddotseq\": \"\\u2A77\", \"deg\": \"\\u00B0\", \"Del\": \"\\u2207\", \"Delta\": \"\\u0394\", \"delta\": \"\\u03B4\", \"demptyv\": \"\\u29B1\", \"dfisht\": \"\\u297F\", \"Dfr\": \"\\uD835\\uDD07\", \"dfr\": \"\\uD835\\uDD21\", \"dHar\": \"\\u2965\", \"dharl\": \"\\u21C3\", \"dharr\": \"\\u21C2\", \"DiacriticalAcute\": \"\\u00B4\", \"DiacriticalDot\": \"\\u02D9\", \"DiacriticalDoubleAcute\": \"\\u02DD\", \"DiacriticalGrave\": \"`\", \"DiacriticalTilde\": \"\\u02DC\", \"diam\": \"\\u22C4\", \"diamond\": \"\\u22C4\", \"Diamond\": \"\\u22C4\", \"diamondsuit\": \"\\u2666\", \"diams\": \"\\u2666\", \"die\": \"\\u00A8\", \"DifferentialD\": \"\\u2146\", \"digamma\": \"\\u03DD\", \"disin\": \"\\u22F2\", \"div\": \"\\u00F7\", \"divide\": \"\\u00F7\", \"divideontimes\": \"\\u22C7\", \"divonx\": \"\\u22C7\", \"DJcy\": \"\\u0402\", \"djcy\": \"\\u0452\", \"dlcorn\": \"\\u231E\", \"dlcrop\": \"\\u230D\", \"dollar\": \"$\", \"Dopf\": \"\\uD835\\uDD3B\", \"dopf\": \"\\uD835\\uDD55\", \"Dot\": \"\\u00A8\", \"dot\": \"\\u02D9\", \"DotDot\": \"\\u20DC\", \"doteq\": \"\\u2250\", \"doteqdot\": \"\\u2251\", \"DotEqual\": \"\\u2250\", \"dotminus\": \"\\u2238\", \"dotplus\": \"\\u2214\", \"dotsquare\": \"\\u22A1\", \"doublebarwedge\": \"\\u2306\", \"DoubleContourIntegral\": \"\\u222F\", \"DoubleDot\": \"\\u00A8\", \"DoubleDownArrow\": \"\\u21D3\", \"DoubleLeftArrow\": \"\\u21D0\", \"DoubleLeftRightArrow\": \"\\u21D4\", \"DoubleLeftTee\": \"\\u2AE4\", \"DoubleLongLeftArrow\": \"\\u27F8\", \"DoubleLongLeftRightArrow\": \"\\u27FA\", \"DoubleLongRightArrow\": \"\\u27F9\", \"DoubleRightArrow\": \"\\u21D2\", \"DoubleRightTee\": \"\\u22A8\", \"DoubleUpArrow\": \"\\u21D1\", \"DoubleUpDownArrow\": \"\\u21D5\", \"DoubleVerticalBar\": \"\\u2225\", \"DownArrowBar\": \"\\u2913\", \"downarrow\": \"\\u2193\", \"DownArrow\": \"\\u2193\", \"Downarrow\": \"\\u21D3\", \"DownArrowUpArrow\": \"\\u21F5\", \"DownBreve\": \"\\u0311\", \"downdownarrows\": \"\\u21CA\", \"downharpoonleft\": \"\\u21C3\", \"downharpoonright\": \"\\u21C2\", \"DownLeftRightVector\": \"\\u2950\", \"DownLeftTeeVector\": \"\\u295E\", \"DownLeftVectorBar\": \"\\u2956\", \"DownLeftVector\": \"\\u21BD\", \"DownRightTeeVector\": \"\\u295F\", \"DownRightVectorBar\": \"\\u2957\", \"DownRightVector\": \"\\u21C1\", \"DownTeeArrow\": \"\\u21A7\", \"DownTee\": \"\\u22A4\", \"drbkarow\": \"\\u2910\", \"drcorn\": \"\\u231F\", \"drcrop\": \"\\u230C\", \"Dscr\": \"\\uD835\\uDC9F\", \"dscr\": \"\\uD835\\uDCB9\", \"DScy\": \"\\u0405\", \"dscy\": \"\\u0455\", \"dsol\": \"\\u29F6\", \"Dstrok\": \"\\u0110\", \"dstrok\": \"\\u0111\", \"dtdot\": \"\\u22F1\", \"dtri\": \"\\u25BF\", \"dtrif\": \"\\u25BE\", \"duarr\": \"\\u21F5\", \"duhar\": \"\\u296F\", \"dwangle\": \"\\u29A6\", \"DZcy\": \"\\u040F\", \"dzcy\": \"\\u045F\", \"dzigrarr\": \"\\u27FF\", \"Eacute\": \"\\u00C9\", \"eacute\": \"\\u00E9\", \"easter\": \"\\u2A6E\", \"Ecaron\": \"\\u011A\", \"ecaron\": \"\\u011B\", \"Ecirc\": \"\\u00CA\", \"ecirc\": \"\\u00EA\", \"ecir\": \"\\u2256\", \"ecolon\": \"\\u2255\", \"Ecy\": \"\\u042D\", \"ecy\": \"\\u044D\", \"eDDot\": \"\\u2A77\", \"Edot\": \"\\u0116\", \"edot\": \"\\u0117\", \"eDot\": \"\\u2251\", \"ee\": \"\\u2147\", \"efDot\": \"\\u2252\", \"Efr\": \"\\uD835\\uDD08\", \"efr\": \"\\uD835\\uDD22\", \"eg\": \"\\u2A9A\", \"Egrave\": \"\\u00C8\", \"egrave\": \"\\u00E8\", \"egs\": \"\\u2A96\", \"egsdot\": \"\\u2A98\", \"el\": \"\\u2A99\", \"Element\": \"\\u2208\", \"elinters\": \"\\u23E7\", \"ell\": \"\\u2113\", \"els\": \"\\u2A95\", \"elsdot\": \"\\u2A97\", \"Emacr\": \"\\u0112\", \"emacr\": \"\\u0113\", \"empty\": \"\\u2205\", \"emptyset\": \"\\u2205\", \"EmptySmallSquare\": \"\\u25FB\", \"emptyv\": \"\\u2205\", \"EmptyVerySmallSquare\": \"\\u25AB\", \"emsp13\": \"\\u2004\", \"emsp14\": \"\\u2005\", \"emsp\": \"\\u2003\", \"ENG\": \"\\u014A\", \"eng\": \"\\u014B\", \"ensp\": \"\\u2002\", \"Eogon\": \"\\u0118\", \"eogon\": \"\\u0119\", \"Eopf\": \"\\uD835\\uDD3C\", \"eopf\": \"\\uD835\\uDD56\", \"epar\": \"\\u22D5\", \"eparsl\": \"\\u29E3\", \"eplus\": \"\\u2A71\", \"epsi\": \"\\u03B5\", \"Epsilon\": \"\\u0395\", \"epsilon\": \"\\u03B5\", \"epsiv\": \"\\u03F5\", \"eqcirc\": \"\\u2256\", \"eqcolon\": \"\\u2255\", \"eqsim\": \"\\u2242\", \"eqslantgtr\": \"\\u2A96\", \"eqslantless\": \"\\u2A95\", \"Equal\": \"\\u2A75\", \"equals\": \"=\", \"EqualTilde\": \"\\u2242\", \"equest\": \"\\u225F\", \"Equilibrium\": \"\\u21CC\", \"equiv\": \"\\u2261\", \"equivDD\": \"\\u2A78\", \"eqvparsl\": \"\\u29E5\", \"erarr\": \"\\u2971\", \"erDot\": \"\\u2253\", \"escr\": \"\\u212F\", \"Escr\": \"\\u2130\", \"esdot\": \"\\u2250\", \"Esim\": \"\\u2A73\", \"esim\": \"\\u2242\", \"Eta\": \"\\u0397\", \"eta\": \"\\u03B7\", \"ETH\": \"\\u00D0\", \"eth\": \"\\u00F0\", \"Euml\": \"\\u00CB\", \"euml\": \"\\u00EB\", \"euro\": \"\\u20AC\", \"excl\": \"!\", \"exist\": \"\\u2203\", \"Exists\": \"\\u2203\", \"expectation\": \"\\u2130\", \"exponentiale\": \"\\u2147\", \"ExponentialE\": \"\\u2147\", \"fallingdotseq\": \"\\u2252\", \"Fcy\": \"\\u0424\", \"fcy\": \"\\u0444\", \"female\": \"\\u2640\", \"ffilig\": \"\\uFB03\", \"fflig\": \"\\uFB00\", \"ffllig\": \"\\uFB04\", \"Ffr\": \"\\uD835\\uDD09\", \"ffr\": \"\\uD835\\uDD23\", \"filig\": \"\\uFB01\", \"FilledSmallSquare\": \"\\u25FC\", \"FilledVerySmallSquare\": \"\\u25AA\", \"fjlig\": \"fj\", \"flat\": \"\\u266D\", \"fllig\": \"\\uFB02\", \"fltns\": \"\\u25B1\", \"fnof\": \"\\u0192\", \"Fopf\": \"\\uD835\\uDD3D\", \"fopf\": \"\\uD835\\uDD57\", \"forall\": \"\\u2200\", \"ForAll\": \"\\u2200\", \"fork\": \"\\u22D4\", \"forkv\": \"\\u2AD9\", \"Fouriertrf\": \"\\u2131\", \"fpartint\": \"\\u2A0D\", \"frac12\": \"\\u00BD\", \"frac13\": \"\\u2153\", \"frac14\": \"\\u00BC\", \"frac15\": \"\\u2155\", \"frac16\": \"\\u2159\", \"frac18\": \"\\u215B\", \"frac23\": \"\\u2154\", \"frac25\": \"\\u2156\", \"frac34\": \"\\u00BE\", \"frac35\": \"\\u2157\", \"frac38\": \"\\u215C\", \"frac45\": \"\\u2158\", \"frac56\": \"\\u215A\", \"frac58\": \"\\u215D\", \"frac78\": \"\\u215E\", \"frasl\": \"\\u2044\", \"frown\": \"\\u2322\", \"fscr\": \"\\uD835\\uDCBB\", \"Fscr\": \"\\u2131\", \"gacute\": \"\\u01F5\", \"Gamma\": \"\\u0393\", \"gamma\": \"\\u03B3\", \"Gammad\": \"\\u03DC\", \"gammad\": \"\\u03DD\", \"gap\": \"\\u2A86\", \"Gbreve\": \"\\u011E\", \"gbreve\": \"\\u011F\", \"Gcedil\": \"\\u0122\", \"Gcirc\": \"\\u011C\", \"gcirc\": \"\\u011D\", \"Gcy\": \"\\u0413\", \"gcy\": \"\\u0433\", \"Gdot\": \"\\u0120\", \"gdot\": \"\\u0121\", \"ge\": \"\\u2265\", \"gE\": \"\\u2267\", \"gEl\": \"\\u2A8C\", \"gel\": \"\\u22DB\", \"geq\": \"\\u2265\", \"geqq\": \"\\u2267\", \"geqslant\": \"\\u2A7E\", \"gescc\": \"\\u2AA9\", \"ges\": \"\\u2A7E\", \"gesdot\": \"\\u2A80\", \"gesdoto\": \"\\u2A82\", \"gesdotol\": \"\\u2A84\", \"gesl\": \"\\u22DB\\uFE00\", \"gesles\": \"\\u2A94\", \"Gfr\": \"\\uD835\\uDD0A\", \"gfr\": \"\\uD835\\uDD24\", \"gg\": \"\\u226B\", \"Gg\": \"\\u22D9\", \"ggg\": \"\\u22D9\", \"gimel\": \"\\u2137\", \"GJcy\": \"\\u0403\", \"gjcy\": \"\\u0453\", \"gla\": \"\\u2AA5\", \"gl\": \"\\u2277\", \"glE\": \"\\u2A92\", \"glj\": \"\\u2AA4\", \"gnap\": \"\\u2A8A\", \"gnapprox\": \"\\u2A8A\", \"gne\": \"\\u2A88\", \"gnE\": \"\\u2269\", \"gneq\": \"\\u2A88\", \"gneqq\": \"\\u2269\", \"gnsim\": \"\\u22E7\", \"Gopf\": \"\\uD835\\uDD3E\", \"gopf\": \"\\uD835\\uDD58\", \"grave\": \"`\", \"GreaterEqual\": \"\\u2265\", \"GreaterEqualLess\": \"\\u22DB\", \"GreaterFullEqual\": \"\\u2267\", \"GreaterGreater\": \"\\u2AA2\", \"GreaterLess\": \"\\u2277\", \"GreaterSlantEqual\": \"\\u2A7E\", \"GreaterTilde\": \"\\u2273\", \"Gscr\": \"\\uD835\\uDCA2\", \"gscr\": \"\\u210A\", \"gsim\": \"\\u2273\", \"gsime\": \"\\u2A8E\", \"gsiml\": \"\\u2A90\", \"gtcc\": \"\\u2AA7\", \"gtcir\": \"\\u2A7A\", \"gt\": \">\", \"GT\": \">\", \"Gt\": \"\\u226B\", \"gtdot\": \"\\u22D7\", \"gtlPar\": \"\\u2995\", \"gtquest\": \"\\u2A7C\", \"gtrapprox\": \"\\u2A86\", \"gtrarr\": \"\\u2978\", \"gtrdot\": \"\\u22D7\", \"gtreqless\": \"\\u22DB\", \"gtreqqless\": \"\\u2A8C\", \"gtrless\": \"\\u2277\", \"gtrsim\": \"\\u2273\", \"gvertneqq\": \"\\u2269\\uFE00\", \"gvnE\": \"\\u2269\\uFE00\", \"Hacek\": \"\\u02C7\", \"hairsp\": \"\\u200A\", \"half\": \"\\u00BD\", \"hamilt\": \"\\u210B\", \"HARDcy\": \"\\u042A\", \"hardcy\": \"\\u044A\", \"harrcir\": \"\\u2948\", \"harr\": \"\\u2194\", \"hArr\": \"\\u21D4\", \"harrw\": \"\\u21AD\", \"Hat\": \"^\", \"hbar\": \"\\u210F\", \"Hcirc\": \"\\u0124\", \"hcirc\": \"\\u0125\", \"hearts\": \"\\u2665\", \"heartsuit\": \"\\u2665\", \"hellip\": \"\\u2026\", \"hercon\": \"\\u22B9\", \"hfr\": \"\\uD835\\uDD25\", \"Hfr\": \"\\u210C\", \"HilbertSpace\": \"\\u210B\", \"hksearow\": \"\\u2925\", \"hkswarow\": \"\\u2926\", \"hoarr\": \"\\u21FF\", \"homtht\": \"\\u223B\", \"hookleftarrow\": \"\\u21A9\", \"hookrightarrow\": \"\\u21AA\", \"hopf\": \"\\uD835\\uDD59\", \"Hopf\": \"\\u210D\", \"horbar\": \"\\u2015\", \"HorizontalLine\": \"\\u2500\", \"hscr\": \"\\uD835\\uDCBD\", \"Hscr\": \"\\u210B\", \"hslash\": \"\\u210F\", \"Hstrok\": \"\\u0126\", \"hstrok\": \"\\u0127\", \"HumpDownHump\": \"\\u224E\", \"HumpEqual\": \"\\u224F\", \"hybull\": \"\\u2043\", \"hyphen\": \"\\u2010\", \"Iacute\": \"\\u00CD\", \"iacute\": \"\\u00ED\", \"ic\": \"\\u2063\", \"Icirc\": \"\\u00CE\", \"icirc\": \"\\u00EE\", \"Icy\": \"\\u0418\", \"icy\": \"\\u0438\", \"Idot\": \"\\u0130\", \"IEcy\": \"\\u0415\", \"iecy\": \"\\u0435\", \"iexcl\": \"\\u00A1\", \"iff\": \"\\u21D4\", \"ifr\": \"\\uD835\\uDD26\", \"Ifr\": \"\\u2111\", \"Igrave\": \"\\u00CC\", \"igrave\": \"\\u00EC\", \"ii\": \"\\u2148\", \"iiiint\": \"\\u2A0C\", \"iiint\": \"\\u222D\", \"iinfin\": \"\\u29DC\", \"iiota\": \"\\u2129\", \"IJlig\": \"\\u0132\", \"ijlig\": \"\\u0133\", \"Imacr\": \"\\u012A\", \"imacr\": \"\\u012B\", \"image\": \"\\u2111\", \"ImaginaryI\": \"\\u2148\", \"imagline\": \"\\u2110\", \"imagpart\": \"\\u2111\", \"imath\": \"\\u0131\", \"Im\": \"\\u2111\", \"imof\": \"\\u22B7\", \"imped\": \"\\u01B5\", \"Implies\": \"\\u21D2\", \"incare\": \"\\u2105\", \"in\": \"\\u2208\", \"infin\": \"\\u221E\", \"infintie\": \"\\u29DD\", \"inodot\": \"\\u0131\", \"intcal\": \"\\u22BA\", \"int\": \"\\u222B\", \"Int\": \"\\u222C\", \"integers\": \"\\u2124\", \"Integral\": \"\\u222B\", \"intercal\": \"\\u22BA\", \"Intersection\": \"\\u22C2\", \"intlarhk\": \"\\u2A17\", \"intprod\": \"\\u2A3C\", \"InvisibleComma\": \"\\u2063\", \"InvisibleTimes\": \"\\u2062\", \"IOcy\": \"\\u0401\", \"iocy\": \"\\u0451\", \"Iogon\": \"\\u012E\", \"iogon\": \"\\u012F\", \"Iopf\": \"\\uD835\\uDD40\", \"iopf\": \"\\uD835\\uDD5A\", \"Iota\": \"\\u0399\", \"iota\": \"\\u03B9\", \"iprod\": \"\\u2A3C\", \"iquest\": \"\\u00BF\", \"iscr\": \"\\uD835\\uDCBE\", \"Iscr\": \"\\u2110\", \"isin\": \"\\u2208\", \"isindot\": \"\\u22F5\", \"isinE\": \"\\u22F9\", \"isins\": \"\\u22F4\", \"isinsv\": \"\\u22F3\", \"isinv\": \"\\u2208\", \"it\": \"\\u2062\", \"Itilde\": \"\\u0128\", \"itilde\": \"\\u0129\", \"Iukcy\": \"\\u0406\", \"iukcy\": \"\\u0456\", \"Iuml\": \"\\u00CF\", \"iuml\": \"\\u00EF\", \"Jcirc\": \"\\u0134\", \"jcirc\": \"\\u0135\", \"Jcy\": \"\\u0419\", \"jcy\": \"\\u0439\", \"Jfr\": \"\\uD835\\uDD0D\", \"jfr\": \"\\uD835\\uDD27\", \"jmath\": \"\\u0237\", \"Jopf\": \"\\uD835\\uDD41\", \"jopf\": \"\\uD835\\uDD5B\", \"Jscr\": \"\\uD835\\uDCA5\", \"jscr\": \"\\uD835\\uDCBF\", \"Jsercy\": \"\\u0408\", \"jsercy\": \"\\u0458\", \"Jukcy\": \"\\u0404\", \"jukcy\": \"\\u0454\", \"Kappa\": \"\\u039A\", \"kappa\": \"\\u03BA\", \"kappav\": \"\\u03F0\", \"Kcedil\": \"\\u0136\", \"kcedil\": \"\\u0137\", \"Kcy\": \"\\u041A\", \"kcy\": \"\\u043A\", \"Kfr\": \"\\uD835\\uDD0E\", \"kfr\": \"\\uD835\\uDD28\", \"kgreen\": \"\\u0138\", \"KHcy\": \"\\u0425\", \"khcy\": \"\\u0445\", \"KJcy\": \"\\u040C\", \"kjcy\": \"\\u045C\", \"Kopf\": \"\\uD835\\uDD42\", \"kopf\": \"\\uD835\\uDD5C\", \"Kscr\": \"\\uD835\\uDCA6\", \"kscr\": \"\\uD835\\uDCC0\", \"lAarr\": \"\\u21DA\", \"Lacute\": \"\\u0139\", \"lacute\": \"\\u013A\", \"laemptyv\": \"\\u29B4\", \"lagran\": \"\\u2112\", \"Lambda\": \"\\u039B\", \"lambda\": \"\\u03BB\", \"lang\": \"\\u27E8\", \"Lang\": \"\\u27EA\", \"langd\": \"\\u2991\", \"langle\": \"\\u27E8\", \"lap\": \"\\u2A85\", \"Laplacetrf\": \"\\u2112\", \"laquo\": \"\\u00AB\", \"larrb\": \"\\u21E4\", \"larrbfs\": \"\\u291F\", \"larr\": \"\\u2190\", \"Larr\": \"\\u219E\", \"lArr\": \"\\u21D0\", \"larrfs\": \"\\u291D\", \"larrhk\": \"\\u21A9\", \"larrlp\": \"\\u21AB\", \"larrpl\": \"\\u2939\", \"larrsim\": \"\\u2973\", \"larrtl\": \"\\u21A2\", \"latail\": \"\\u2919\", \"lAtail\": \"\\u291B\", \"lat\": \"\\u2AAB\", \"late\": \"\\u2AAD\", \"lates\": \"\\u2AAD\\uFE00\", \"lbarr\": \"\\u290C\", \"lBarr\": \"\\u290E\", \"lbbrk\": \"\\u2772\", \"lbrace\": \"{\", \"lbrack\": \"[\", \"lbrke\": \"\\u298B\", \"lbrksld\": \"\\u298F\", \"lbrkslu\": \"\\u298D\", \"Lcaron\": \"\\u013D\", \"lcaron\": \"\\u013E\", \"Lcedil\": \"\\u013B\", \"lcedil\": \"\\u013C\", \"lceil\": \"\\u2308\", \"lcub\": \"{\", \"Lcy\": \"\\u041B\", \"lcy\": \"\\u043B\", \"ldca\": \"\\u2936\", \"ldquo\": \"\\u201C\", \"ldquor\": \"\\u201E\", \"ldrdhar\": \"\\u2967\", \"ldrushar\": \"\\u294B\", \"ldsh\": \"\\u21B2\", \"le\": \"\\u2264\", \"lE\": \"\\u2266\", \"LeftAngleBracket\": \"\\u27E8\", \"LeftArrowBar\": \"\\u21E4\", \"leftarrow\": \"\\u2190\", \"LeftArrow\": \"\\u2190\", \"Leftarrow\": \"\\u21D0\", \"LeftArrowRightArrow\": \"\\u21C6\", \"leftarrowtail\": \"\\u21A2\", \"LeftCeiling\": \"\\u2308\", \"LeftDoubleBracket\": \"\\u27E6\", \"LeftDownTeeVector\": \"\\u2961\", \"LeftDownVectorBar\": \"\\u2959\", \"LeftDownVector\": \"\\u21C3\", \"LeftFloor\": \"\\u230A\", \"leftharpoondown\": \"\\u21BD\", \"leftharpoonup\": \"\\u21BC\", \"leftleftarrows\": \"\\u21C7\", \"leftrightarrow\": \"\\u2194\", \"LeftRightArrow\": \"\\u2194\", \"Leftrightarrow\": \"\\u21D4\", \"leftrightarrows\": \"\\u21C6\", \"leftrightharpoons\": \"\\u21CB\", \"leftrightsquigarrow\": \"\\u21AD\", \"LeftRightVector\": \"\\u294E\", \"LeftTeeArrow\": \"\\u21A4\", \"LeftTee\": \"\\u22A3\", \"LeftTeeVector\": \"\\u295A\", \"leftthreetimes\": \"\\u22CB\", \"LeftTriangleBar\": \"\\u29CF\", \"LeftTriangle\": \"\\u22B2\", \"LeftTriangleEqual\": \"\\u22B4\", \"LeftUpDownVector\": \"\\u2951\", \"LeftUpTeeVector\": \"\\u2960\", \"LeftUpVectorBar\": \"\\u2958\", \"LeftUpVector\": \"\\u21BF\", \"LeftVectorBar\": \"\\u2952\", \"LeftVector\": \"\\u21BC\", \"lEg\": \"\\u2A8B\", \"leg\": \"\\u22DA\", \"leq\": \"\\u2264\", \"leqq\": \"\\u2266\", \"leqslant\": \"\\u2A7D\", \"lescc\": \"\\u2AA8\", \"les\": \"\\u2A7D\", \"lesdot\": \"\\u2A7F\", \"lesdoto\": \"\\u2A81\", \"lesdotor\": \"\\u2A83\", \"lesg\": \"\\u22DA\\uFE00\", \"lesges\": \"\\u2A93\", \"lessapprox\": \"\\u2A85\", \"lessdot\": \"\\u22D6\", \"lesseqgtr\": \"\\u22DA\", \"lesseqqgtr\": \"\\u2A8B\", \"LessEqualGreater\": \"\\u22DA\", \"LessFullEqual\": \"\\u2266\", \"LessGreater\": \"\\u2276\", \"lessgtr\": \"\\u2276\", \"LessLess\": \"\\u2AA1\", \"lesssim\": \"\\u2272\", \"LessSlantEqual\": \"\\u2A7D\", \"LessTilde\": \"\\u2272\", \"lfisht\": \"\\u297C\", \"lfloor\": \"\\u230A\", \"Lfr\": \"\\uD835\\uDD0F\", \"lfr\": \"\\uD835\\uDD29\", \"lg\": \"\\u2276\", \"lgE\": \"\\u2A91\", \"lHar\": \"\\u2962\", \"lhard\": \"\\u21BD\", \"lharu\": \"\\u21BC\", \"lharul\": \"\\u296A\", \"lhblk\": \"\\u2584\", \"LJcy\": \"\\u0409\", \"ljcy\": \"\\u0459\", \"llarr\": \"\\u21C7\", \"ll\": \"\\u226A\", \"Ll\": \"\\u22D8\", \"llcorner\": \"\\u231E\", \"Lleftarrow\": \"\\u21DA\", \"llhard\": \"\\u296B\", \"lltri\": \"\\u25FA\", \"Lmidot\": \"\\u013F\", \"lmidot\": \"\\u0140\", \"lmoustache\": \"\\u23B0\", \"lmoust\": \"\\u23B0\", \"lnap\": \"\\u2A89\", \"lnapprox\": \"\\u2A89\", \"lne\": \"\\u2A87\", \"lnE\": \"\\u2268\", \"lneq\": \"\\u2A87\", \"lneqq\": \"\\u2268\", \"lnsim\": \"\\u22E6\", \"loang\": \"\\u27EC\", \"loarr\": \"\\u21FD\", \"lobrk\": \"\\u27E6\", \"longleftarrow\": \"\\u27F5\", \"LongLeftArrow\": \"\\u27F5\", \"Longleftarrow\": \"\\u27F8\", \"longleftrightarrow\": \"\\u27F7\", \"LongLeftRightArrow\": \"\\u27F7\", \"Longleftrightarrow\": \"\\u27FA\", \"longmapsto\": \"\\u27FC\", \"longrightarrow\": \"\\u27F6\", \"LongRightArrow\": \"\\u27F6\", \"Longrightarrow\": \"\\u27F9\", \"looparrowleft\": \"\\u21AB\", \"looparrowright\": \"\\u21AC\", \"lopar\": \"\\u2985\", \"Lopf\": \"\\uD835\\uDD43\", \"lopf\": \"\\uD835\\uDD5D\", \"loplus\": \"\\u2A2D\", \"lotimes\": \"\\u2A34\", \"lowast\": \"\\u2217\", \"lowbar\": \"_\", \"LowerLeftArrow\": \"\\u2199\", \"LowerRightArrow\": \"\\u2198\", \"loz\": \"\\u25CA\", \"lozenge\": \"\\u25CA\", \"lozf\": \"\\u29EB\", \"lpar\": \"(\", \"lparlt\": \"\\u2993\", \"lrarr\": \"\\u21C6\", \"lrcorner\": \"\\u231F\", \"lrhar\": \"\\u21CB\", \"lrhard\": \"\\u296D\", \"lrm\": \"\\u200E\", \"lrtri\": \"\\u22BF\", \"lsaquo\": \"\\u2039\", \"lscr\": \"\\uD835\\uDCC1\", \"Lscr\": \"\\u2112\", \"lsh\": \"\\u21B0\", \"Lsh\": \"\\u21B0\", \"lsim\": \"\\u2272\", \"lsime\": \"\\u2A8D\", \"lsimg\": \"\\u2A8F\", \"lsqb\": \"[\", \"lsquo\": \"\\u2018\", \"lsquor\": \"\\u201A\", \"Lstrok\": \"\\u0141\", \"lstrok\": \"\\u0142\", \"ltcc\": \"\\u2AA6\", \"ltcir\": \"\\u2A79\", \"lt\": \"<\", \"LT\": \"<\", \"Lt\": \"\\u226A\", \"ltdot\": \"\\u22D6\", \"lthree\": \"\\u22CB\", \"ltimes\": \"\\u22C9\", \"ltlarr\": \"\\u2976\", \"ltquest\": \"\\u2A7B\", \"ltri\": \"\\u25C3\", \"ltrie\": \"\\u22B4\", \"ltrif\": \"\\u25C2\", \"ltrPar\": \"\\u2996\", \"lurdshar\": \"\\u294A\", \"luruhar\": \"\\u2966\", \"lvertneqq\": \"\\u2268\\uFE00\", \"lvnE\": \"\\u2268\\uFE00\", \"macr\": \"\\u00AF\", \"male\": \"\\u2642\", \"malt\": \"\\u2720\", \"maltese\": \"\\u2720\", \"Map\": \"\\u2905\", \"map\": \"\\u21A6\", \"mapsto\": \"\\u21A6\", \"mapstodown\": \"\\u21A7\", \"mapstoleft\": \"\\u21A4\", \"mapstoup\": \"\\u21A5\", \"marker\": \"\\u25AE\", \"mcomma\": \"\\u2A29\", \"Mcy\": \"\\u041C\", \"mcy\": \"\\u043C\", \"mdash\": \"\\u2014\", \"mDDot\": \"\\u223A\", \"measuredangle\": \"\\u2221\", \"MediumSpace\": \"\\u205F\", \"Mellintrf\": \"\\u2133\", \"Mfr\": \"\\uD835\\uDD10\", \"mfr\": \"\\uD835\\uDD2A\", \"mho\": \"\\u2127\", \"micro\": \"\\u00B5\", \"midast\": \"*\", \"midcir\": \"\\u2AF0\", \"mid\": \"\\u2223\", \"middot\": \"\\u00B7\", \"minusb\": \"\\u229F\", \"minus\": \"\\u2212\", \"minusd\": \"\\u2238\", \"minusdu\": \"\\u2A2A\", \"MinusPlus\": \"\\u2213\", \"mlcp\": \"\\u2ADB\", \"mldr\": \"\\u2026\", \"mnplus\": \"\\u2213\", \"models\": \"\\u22A7\", \"Mopf\": \"\\uD835\\uDD44\", \"mopf\": \"\\uD835\\uDD5E\", \"mp\": \"\\u2213\", \"mscr\": \"\\uD835\\uDCC2\", \"Mscr\": \"\\u2133\", \"mstpos\": \"\\u223E\", \"Mu\": \"\\u039C\", \"mu\": \"\\u03BC\", \"multimap\": \"\\u22B8\", \"mumap\": \"\\u22B8\", \"nabla\": \"\\u2207\", \"Nacute\": \"\\u0143\", \"nacute\": \"\\u0144\", \"nang\": \"\\u2220\\u20D2\", \"nap\": \"\\u2249\", \"napE\": \"\\u2A70\\u0338\", \"napid\": \"\\u224B\\u0338\", \"napos\": \"\\u0149\", \"napprox\": \"\\u2249\", \"natural\": \"\\u266E\", \"naturals\": \"\\u2115\", \"natur\": \"\\u266E\", \"nbsp\": \"\\u00A0\", \"nbump\": \"\\u224E\\u0338\", \"nbumpe\": \"\\u224F\\u0338\", \"ncap\": \"\\u2A43\", \"Ncaron\": \"\\u0147\", \"ncaron\": \"\\u0148\", \"Ncedil\": \"\\u0145\", \"ncedil\": \"\\u0146\", \"ncong\": \"\\u2247\", \"ncongdot\": \"\\u2A6D\\u0338\", \"ncup\": \"\\u2A42\", \"Ncy\": \"\\u041D\", \"ncy\": \"\\u043D\", \"ndash\": \"\\u2013\", \"nearhk\": \"\\u2924\", \"nearr\": \"\\u2197\", \"neArr\": \"\\u21D7\", \"nearrow\": \"\\u2197\", \"ne\": \"\\u2260\", \"nedot\": \"\\u2250\\u0338\", \"NegativeMediumSpace\": \"\\u200B\", \"NegativeThickSpace\": \"\\u200B\", \"NegativeThinSpace\": \"\\u200B\", \"NegativeVeryThinSpace\": \"\\u200B\", \"nequiv\": \"\\u2262\", \"nesear\": \"\\u2928\", \"nesim\": \"\\u2242\\u0338\", \"NestedGreaterGreater\": \"\\u226B\", \"NestedLessLess\": \"\\u226A\", \"NewLine\": \"\\n\", \"nexist\": \"\\u2204\", \"nexists\": \"\\u2204\", \"Nfr\": \"\\uD835\\uDD11\", \"nfr\": \"\\uD835\\uDD2B\", \"ngE\": \"\\u2267\\u0338\", \"nge\": \"\\u2271\", \"ngeq\": \"\\u2271\", \"ngeqq\": \"\\u2267\\u0338\", \"ngeqslant\": \"\\u2A7E\\u0338\", \"nges\": \"\\u2A7E\\u0338\", \"nGg\": \"\\u22D9\\u0338\", \"ngsim\": \"\\u2275\", \"nGt\": \"\\u226B\\u20D2\", \"ngt\": \"\\u226F\", \"ngtr\": \"\\u226F\", \"nGtv\": \"\\u226B\\u0338\", \"nharr\": \"\\u21AE\", \"nhArr\": \"\\u21CE\", \"nhpar\": \"\\u2AF2\", \"ni\": \"\\u220B\", \"nis\": \"\\u22FC\", \"nisd\": \"\\u22FA\", \"niv\": \"\\u220B\", \"NJcy\": \"\\u040A\", \"njcy\": \"\\u045A\", \"nlarr\": \"\\u219A\", \"nlArr\": \"\\u21CD\", \"nldr\": \"\\u2025\", \"nlE\": \"\\u2266\\u0338\", \"nle\": \"\\u2270\", \"nleftarrow\": \"\\u219A\", \"nLeftarrow\": \"\\u21CD\", \"nleftrightarrow\": \"\\u21AE\", \"nLeftrightarrow\": \"\\u21CE\", \"nleq\": \"\\u2270\", \"nleqq\": \"\\u2266\\u0338\", \"nleqslant\": \"\\u2A7D\\u0338\", \"nles\": \"\\u2A7D\\u0338\", \"nless\": \"\\u226E\", \"nLl\": \"\\u22D8\\u0338\", \"nlsim\": \"\\u2274\", \"nLt\": \"\\u226A\\u20D2\", \"nlt\": \"\\u226E\", \"nltri\": \"\\u22EA\", \"nltrie\": \"\\u22EC\", \"nLtv\": \"\\u226A\\u0338\", \"nmid\": \"\\u2224\", \"NoBreak\": \"\\u2060\", \"NonBreakingSpace\": \"\\u00A0\", \"nopf\": \"\\uD835\\uDD5F\", \"Nopf\": \"\\u2115\", \"Not\": \"\\u2AEC\", \"not\": \"\\u00AC\", \"NotCongruent\": \"\\u2262\", \"NotCupCap\": \"\\u226D\", \"NotDoubleVerticalBar\": \"\\u2226\", \"NotElement\": \"\\u2209\", \"NotEqual\": \"\\u2260\", \"NotEqualTilde\": \"\\u2242\\u0338\", \"NotExists\": \"\\u2204\", \"NotGreater\": \"\\u226F\", \"NotGreaterEqual\": \"\\u2271\", \"NotGreaterFullEqual\": \"\\u2267\\u0338\", \"NotGreaterGreater\": \"\\u226B\\u0338\", \"NotGreaterLess\": \"\\u2279\", \"NotGreaterSlantEqual\": \"\\u2A7E\\u0338\", \"NotGreaterTilde\": \"\\u2275\", \"NotHumpDownHump\": \"\\u224E\\u0338\", \"NotHumpEqual\": \"\\u224F\\u0338\", \"notin\": \"\\u2209\", \"notindot\": \"\\u22F5\\u0338\", \"notinE\": \"\\u22F9\\u0338\", \"notinva\": \"\\u2209\", \"notinvb\": \"\\u22F7\", \"notinvc\": \"\\u22F6\", \"NotLeftTriangleBar\": \"\\u29CF\\u0338\", \"NotLeftTriangle\": \"\\u22EA\", \"NotLeftTriangleEqual\": \"\\u22EC\", \"NotLess\": \"\\u226E\", \"NotLessEqual\": \"\\u2270\", \"NotLessGreater\": \"\\u2278\", \"NotLessLess\": \"\\u226A\\u0338\", \"NotLessSlantEqual\": \"\\u2A7D\\u0338\", \"NotLessTilde\": \"\\u2274\", \"NotNestedGreaterGreater\": \"\\u2AA2\\u0338\", \"NotNestedLessLess\": \"\\u2AA1\\u0338\", \"notni\": \"\\u220C\", \"notniva\": \"\\u220C\", \"notnivb\": \"\\u22FE\", \"notnivc\": \"\\u22FD\", \"NotPrecedes\": \"\\u2280\", \"NotPrecedesEqual\": \"\\u2AAF\\u0338\", \"NotPrecedesSlantEqual\": \"\\u22E0\", \"NotReverseElement\": \"\\u220C\", \"NotRightTriangleBar\": \"\\u29D0\\u0338\", \"NotRightTriangle\": \"\\u22EB\", \"NotRightTriangleEqual\": \"\\u22ED\", \"NotSquareSubset\": \"\\u228F\\u0338\", \"NotSquareSubsetEqual\": \"\\u22E2\", \"NotSquareSuperset\": \"\\u2290\\u0338\", \"NotSquareSupersetEqual\": \"\\u22E3\", \"NotSubset\": \"\\u2282\\u20D2\", \"NotSubsetEqual\": \"\\u2288\", \"NotSucceeds\": \"\\u2281\", \"NotSucceedsEqual\": \"\\u2AB0\\u0338\", \"NotSucceedsSlantEqual\": \"\\u22E1\", \"NotSucceedsTilde\": \"\\u227F\\u0338\", \"NotSuperset\": \"\\u2283\\u20D2\", \"NotSupersetEqual\": \"\\u2289\", \"NotTilde\": \"\\u2241\", \"NotTildeEqual\": \"\\u2244\", \"NotTildeFullEqual\": \"\\u2247\", \"NotTildeTilde\": \"\\u2249\", \"NotVerticalBar\": \"\\u2224\", \"nparallel\": \"\\u2226\", \"npar\": \"\\u2226\", \"nparsl\": \"\\u2AFD\\u20E5\", \"npart\": \"\\u2202\\u0338\", \"npolint\": \"\\u2A14\", \"npr\": \"\\u2280\", \"nprcue\": \"\\u22E0\", \"nprec\": \"\\u2280\", \"npreceq\": \"\\u2AAF\\u0338\", \"npre\": \"\\u2AAF\\u0338\", \"nrarrc\": \"\\u2933\\u0338\", \"nrarr\": \"\\u219B\", \"nrArr\": \"\\u21CF\", \"nrarrw\": \"\\u219D\\u0338\", \"nrightarrow\": \"\\u219B\", \"nRightarrow\": \"\\u21CF\", \"nrtri\": \"\\u22EB\", \"nrtrie\": \"\\u22ED\", \"nsc\": \"\\u2281\", \"nsccue\": \"\\u22E1\", \"nsce\": \"\\u2AB0\\u0338\", \"Nscr\": \"\\uD835\\uDCA9\", \"nscr\": \"\\uD835\\uDCC3\", \"nshortmid\": \"\\u2224\", \"nshortparallel\": \"\\u2226\", \"nsim\": \"\\u2241\", \"nsime\": \"\\u2244\", \"nsimeq\": \"\\u2244\", \"nsmid\": \"\\u2224\", \"nspar\": \"\\u2226\", \"nsqsube\": \"\\u22E2\", \"nsqsupe\": \"\\u22E3\", \"nsub\": \"\\u2284\", \"nsubE\": \"\\u2AC5\\u0338\", \"nsube\": \"\\u2288\", \"nsubset\": \"\\u2282\\u20D2\", \"nsubseteq\": \"\\u2288\", \"nsubseteqq\": \"\\u2AC5\\u0338\", \"nsucc\": \"\\u2281\", \"nsucceq\": \"\\u2AB0\\u0338\", \"nsup\": \"\\u2285\", \"nsupE\": \"\\u2AC6\\u0338\", \"nsupe\": \"\\u2289\", \"nsupset\": \"\\u2283\\u20D2\", \"nsupseteq\": \"\\u2289\", \"nsupseteqq\": \"\\u2AC6\\u0338\", \"ntgl\": \"\\u2279\", \"Ntilde\": \"\\u00D1\", \"ntilde\": \"\\u00F1\", \"ntlg\": \"\\u2278\", \"ntriangleleft\": \"\\u22EA\", \"ntrianglelefteq\": \"\\u22EC\", \"ntriangleright\": \"\\u22EB\", \"ntrianglerighteq\": \"\\u22ED\", \"Nu\": \"\\u039D\", \"nu\": \"\\u03BD\", \"num\": \"#\", \"numero\": \"\\u2116\", \"numsp\": \"\\u2007\", \"nvap\": \"\\u224D\\u20D2\", \"nvdash\": \"\\u22AC\", \"nvDash\": \"\\u22AD\", \"nVdash\": \"\\u22AE\", \"nVDash\": \"\\u22AF\", \"nvge\": \"\\u2265\\u20D2\", \"nvgt\": \">\\u20D2\", \"nvHarr\": \"\\u2904\", \"nvinfin\": \"\\u29DE\", \"nvlArr\": \"\\u2902\", \"nvle\": \"\\u2264\\u20D2\", \"nvlt\": \"<\\u20D2\", \"nvltrie\": \"\\u22B4\\u20D2\", \"nvrArr\": \"\\u2903\", \"nvrtrie\": \"\\u22B5\\u20D2\", \"nvsim\": \"\\u223C\\u20D2\", \"nwarhk\": \"\\u2923\", \"nwarr\": \"\\u2196\", \"nwArr\": \"\\u21D6\", \"nwarrow\": \"\\u2196\", \"nwnear\": \"\\u2927\", \"Oacute\": \"\\u00D3\", \"oacute\": \"\\u00F3\", \"oast\": \"\\u229B\", \"Ocirc\": \"\\u00D4\", \"ocirc\": \"\\u00F4\", \"ocir\": \"\\u229A\", \"Ocy\": \"\\u041E\", \"ocy\": \"\\u043E\", \"odash\": \"\\u229D\", \"Odblac\": \"\\u0150\", \"odblac\": \"\\u0151\", \"odiv\": \"\\u2A38\", \"odot\": \"\\u2299\", \"odsold\": \"\\u29BC\", \"OElig\": \"\\u0152\", \"oelig\": \"\\u0153\", \"ofcir\": \"\\u29BF\", \"Ofr\": \"\\uD835\\uDD12\", \"ofr\": \"\\uD835\\uDD2C\", \"ogon\": \"\\u02DB\", \"Ograve\": \"\\u00D2\", \"ograve\": \"\\u00F2\", \"ogt\": \"\\u29C1\", \"ohbar\": \"\\u29B5\", \"ohm\": \"\\u03A9\", \"oint\": \"\\u222E\", \"olarr\": \"\\u21BA\", \"olcir\": \"\\u29BE\", \"olcross\": \"\\u29BB\", \"oline\": \"\\u203E\", \"olt\": \"\\u29C0\", \"Omacr\": \"\\u014C\", \"omacr\": \"\\u014D\", \"Omega\": \"\\u03A9\", \"omega\": \"\\u03C9\", \"Omicron\": \"\\u039F\", \"omicron\": \"\\u03BF\", \"omid\": \"\\u29B6\", \"ominus\": \"\\u2296\", \"Oopf\": \"\\uD835\\uDD46\", \"oopf\": \"\\uD835\\uDD60\", \"opar\": \"\\u29B7\", \"OpenCurlyDoubleQuote\": \"\\u201C\", \"OpenCurlyQuote\": \"\\u2018\", \"operp\": \"\\u29B9\", \"oplus\": \"\\u2295\", \"orarr\": \"\\u21BB\", \"Or\": \"\\u2A54\", \"or\": \"\\u2228\", \"ord\": \"\\u2A5D\", \"order\": \"\\u2134\", \"orderof\": \"\\u2134\", \"ordf\": \"\\u00AA\", \"ordm\": \"\\u00BA\", \"origof\": \"\\u22B6\", \"oror\": \"\\u2A56\", \"orslope\": \"\\u2A57\", \"orv\": \"\\u2A5B\", \"oS\": \"\\u24C8\", \"Oscr\": \"\\uD835\\uDCAA\", \"oscr\": \"\\u2134\", \"Oslash\": \"\\u00D8\", \"oslash\": \"\\u00F8\", \"osol\": \"\\u2298\", \"Otilde\": \"\\u00D5\", \"otilde\": \"\\u00F5\", \"otimesas\": \"\\u2A36\", \"Otimes\": \"\\u2A37\", \"otimes\": \"\\u2297\", \"Ouml\": \"\\u00D6\", \"ouml\": \"\\u00F6\", \"ovbar\": \"\\u233D\", \"OverBar\": \"\\u203E\", \"OverBrace\": \"\\u23DE\", \"OverBracket\": \"\\u23B4\", \"OverParenthesis\": \"\\u23DC\", \"para\": \"\\u00B6\", \"parallel\": \"\\u2225\", \"par\": \"\\u2225\", \"parsim\": \"\\u2AF3\", \"parsl\": \"\\u2AFD\", \"part\": \"\\u2202\", \"PartialD\": \"\\u2202\", \"Pcy\": \"\\u041F\", \"pcy\": \"\\u043F\", \"percnt\": \"%\", \"period\": \".\", \"permil\": \"\\u2030\", \"perp\": \"\\u22A5\", \"pertenk\": \"\\u2031\", \"Pfr\": \"\\uD835\\uDD13\", \"pfr\": \"\\uD835\\uDD2D\", \"Phi\": \"\\u03A6\", \"phi\": \"\\u03C6\", \"phiv\": \"\\u03D5\", \"phmmat\": \"\\u2133\", \"phone\": \"\\u260E\", \"Pi\": \"\\u03A0\", \"pi\": \"\\u03C0\", \"pitchfork\": \"\\u22D4\", \"piv\": \"\\u03D6\", \"planck\": \"\\u210F\", \"planckh\": \"\\u210E\", \"plankv\": \"\\u210F\", \"plusacir\": \"\\u2A23\", \"plusb\": \"\\u229E\", \"pluscir\": \"\\u2A22\", \"plus\": \"+\", \"plusdo\": \"\\u2214\", \"plusdu\": \"\\u2A25\", \"pluse\": \"\\u2A72\", \"PlusMinus\": \"\\u00B1\", \"plusmn\": \"\\u00B1\", \"plussim\": \"\\u2A26\", \"plustwo\": \"\\u2A27\", \"pm\": \"\\u00B1\", \"Poincareplane\": \"\\u210C\", \"pointint\": \"\\u2A15\", \"popf\": \"\\uD835\\uDD61\", \"Popf\": \"\\u2119\", \"pound\": \"\\u00A3\", \"prap\": \"\\u2AB7\", \"Pr\": \"\\u2ABB\", \"pr\": \"\\u227A\", \"prcue\": \"\\u227C\", \"precapprox\": \"\\u2AB7\", \"prec\": \"\\u227A\", \"preccurlyeq\": \"\\u227C\", \"Precedes\": \"\\u227A\", \"PrecedesEqual\": \"\\u2AAF\", \"PrecedesSlantEqual\": \"\\u227C\", \"PrecedesTilde\": \"\\u227E\", \"preceq\": \"\\u2AAF\", \"precnapprox\": \"\\u2AB9\", \"precneqq\": \"\\u2AB5\", \"precnsim\": \"\\u22E8\", \"pre\": \"\\u2AAF\", \"prE\": \"\\u2AB3\", \"precsim\": \"\\u227E\", \"prime\": \"\\u2032\", \"Prime\": \"\\u2033\", \"primes\": \"\\u2119\", \"prnap\": \"\\u2AB9\", \"prnE\": \"\\u2AB5\", \"prnsim\": \"\\u22E8\", \"prod\": \"\\u220F\", \"Product\": \"\\u220F\", \"profalar\": \"\\u232E\", \"profline\": \"\\u2312\", \"profsurf\": \"\\u2313\", \"prop\": \"\\u221D\", \"Proportional\": \"\\u221D\", \"Proportion\": \"\\u2237\", \"propto\": \"\\u221D\", \"prsim\": \"\\u227E\", \"prurel\": \"\\u22B0\", \"Pscr\": \"\\uD835\\uDCAB\", \"pscr\": \"\\uD835\\uDCC5\", \"Psi\": \"\\u03A8\", \"psi\": \"\\u03C8\", \"puncsp\": \"\\u2008\", \"Qfr\": \"\\uD835\\uDD14\", \"qfr\": \"\\uD835\\uDD2E\", \"qint\": \"\\u2A0C\", \"qopf\": \"\\uD835\\uDD62\", \"Qopf\": \"\\u211A\", \"qprime\": \"\\u2057\", \"Qscr\": \"\\uD835\\uDCAC\", \"qscr\": \"\\uD835\\uDCC6\", \"quaternions\": \"\\u210D\", \"quatint\": \"\\u2A16\", \"quest\": \"?\", \"questeq\": \"\\u225F\", \"quot\": \"\\\"\", \"QUOT\": \"\\\"\", \"rAarr\": \"\\u21DB\", \"race\": \"\\u223D\\u0331\", \"Racute\": \"\\u0154\", \"racute\": \"\\u0155\", \"radic\": \"\\u221A\", \"raemptyv\": \"\\u29B3\", \"rang\": \"\\u27E9\", \"Rang\": \"\\u27EB\", \"rangd\": \"\\u2992\", \"range\": \"\\u29A5\", \"rangle\": \"\\u27E9\", \"raquo\": \"\\u00BB\", \"rarrap\": \"\\u2975\", \"rarrb\": \"\\u21E5\", \"rarrbfs\": \"\\u2920\", \"rarrc\": \"\\u2933\", \"rarr\": \"\\u2192\", \"Rarr\": \"\\u21A0\", \"rArr\": \"\\u21D2\", \"rarrfs\": \"\\u291E\", \"rarrhk\": \"\\u21AA\", \"rarrlp\": \"\\u21AC\", \"rarrpl\": \"\\u2945\", \"rarrsim\": \"\\u2974\", \"Rarrtl\": \"\\u2916\", \"rarrtl\": \"\\u21A3\", \"rarrw\": \"\\u219D\", \"ratail\": \"\\u291A\", \"rAtail\": \"\\u291C\", \"ratio\": \"\\u2236\", \"rationals\": \"\\u211A\", \"rbarr\": \"\\u290D\", \"rBarr\": \"\\u290F\", \"RBarr\": \"\\u2910\", \"rbbrk\": \"\\u2773\", \"rbrace\": \"}\", \"rbrack\": \"]\", \"rbrke\": \"\\u298C\", \"rbrksld\": \"\\u298E\", \"rbrkslu\": \"\\u2990\", \"Rcaron\": \"\\u0158\", \"rcaron\": \"\\u0159\", \"Rcedil\": \"\\u0156\", \"rcedil\": \"\\u0157\", \"rceil\": \"\\u2309\", \"rcub\": \"}\", \"Rcy\": \"\\u0420\", \"rcy\": \"\\u0440\", \"rdca\": \"\\u2937\", \"rdldhar\": \"\\u2969\", \"rdquo\": \"\\u201D\", \"rdquor\": \"\\u201D\", \"rdsh\": \"\\u21B3\", \"real\": \"\\u211C\", \"realine\": \"\\u211B\", \"realpart\": \"\\u211C\", \"reals\": \"\\u211D\", \"Re\": \"\\u211C\", \"rect\": \"\\u25AD\", \"reg\": \"\\u00AE\", \"REG\": \"\\u00AE\", \"ReverseElement\": \"\\u220B\", \"ReverseEquilibrium\": \"\\u21CB\", \"ReverseUpEquilibrium\": \"\\u296F\", \"rfisht\": \"\\u297D\", \"rfloor\": \"\\u230B\", \"rfr\": \"\\uD835\\uDD2F\", \"Rfr\": \"\\u211C\", \"rHar\": \"\\u2964\", \"rhard\": \"\\u21C1\", \"rharu\": \"\\u21C0\", \"rharul\": \"\\u296C\", \"Rho\": \"\\u03A1\", \"rho\": \"\\u03C1\", \"rhov\": \"\\u03F1\", \"RightAngleBracket\": \"\\u27E9\", \"RightArrowBar\": \"\\u21E5\", \"rightarrow\": \"\\u2192\", \"RightArrow\": \"\\u2192\", \"Rightarrow\": \"\\u21D2\", \"RightArrowLeftArrow\": \"\\u21C4\", \"rightarrowtail\": \"\\u21A3\", \"RightCeiling\": \"\\u2309\", \"RightDoubleBracket\": \"\\u27E7\", \"RightDownTeeVector\": \"\\u295D\", \"RightDownVectorBar\": \"\\u2955\", \"RightDownVector\": \"\\u21C2\", \"RightFloor\": \"\\u230B\", \"rightharpoondown\": \"\\u21C1\", \"rightharpoonup\": \"\\u21C0\", \"rightleftarrows\": \"\\u21C4\", \"rightleftharpoons\": \"\\u21CC\", \"rightrightarrows\": \"\\u21C9\", \"rightsquigarrow\": \"\\u219D\", \"RightTeeArrow\": \"\\u21A6\", \"RightTee\": \"\\u22A2\", \"RightTeeVector\": \"\\u295B\", \"rightthreetimes\": \"\\u22CC\", \"RightTriangleBar\": \"\\u29D0\", \"RightTriangle\": \"\\u22B3\", \"RightTriangleEqual\": \"\\u22B5\", \"RightUpDownVector\": \"\\u294F\", \"RightUpTeeVector\": \"\\u295C\", \"RightUpVectorBar\": \"\\u2954\", \"RightUpVector\": \"\\u21BE\", \"RightVectorBar\": \"\\u2953\", \"RightVector\": \"\\u21C0\", \"ring\": \"\\u02DA\", \"risingdotseq\": \"\\u2253\", \"rlarr\": \"\\u21C4\", \"rlhar\": \"\\u21CC\", \"rlm\": \"\\u200F\", \"rmoustache\": \"\\u23B1\", \"rmoust\": \"\\u23B1\", \"rnmid\": \"\\u2AEE\", \"roang\": \"\\u27ED\", \"roarr\": \"\\u21FE\", \"robrk\": \"\\u27E7\", \"ropar\": \"\\u2986\", \"ropf\": \"\\uD835\\uDD63\", \"Ropf\": \"\\u211D\", \"roplus\": \"\\u2A2E\", \"rotimes\": \"\\u2A35\", \"RoundImplies\": \"\\u2970\", \"rpar\": \")\", \"rpargt\": \"\\u2994\", \"rppolint\": \"\\u2A12\", \"rrarr\": \"\\u21C9\", \"Rrightarrow\": \"\\u21DB\", \"rsaquo\": \"\\u203A\", \"rscr\": \"\\uD835\\uDCC7\", \"Rscr\": \"\\u211B\", \"rsh\": \"\\u21B1\", \"Rsh\": \"\\u21B1\", \"rsqb\": \"]\", \"rsquo\": \"\\u2019\", \"rsquor\": \"\\u2019\", \"rthree\": \"\\u22CC\", \"rtimes\": \"\\u22CA\", \"rtri\": \"\\u25B9\", \"rtrie\": \"\\u22B5\", \"rtrif\": \"\\u25B8\", \"rtriltri\": \"\\u29CE\", \"RuleDelayed\": \"\\u29F4\", \"ruluhar\": \"\\u2968\", \"rx\": \"\\u211E\", \"Sacute\": \"\\u015A\", \"sacute\": \"\\u015B\", \"sbquo\": \"\\u201A\", \"scap\": \"\\u2AB8\", \"Scaron\": \"\\u0160\", \"scaron\": \"\\u0161\", \"Sc\": \"\\u2ABC\", \"sc\": \"\\u227B\", \"sccue\": \"\\u227D\", \"sce\": \"\\u2AB0\", \"scE\": \"\\u2AB4\", \"Scedil\": \"\\u015E\", \"scedil\": \"\\u015F\", \"Scirc\": \"\\u015C\", \"scirc\": \"\\u015D\", \"scnap\": \"\\u2ABA\", \"scnE\": \"\\u2AB6\", \"scnsim\": \"\\u22E9\", \"scpolint\": \"\\u2A13\", \"scsim\": \"\\u227F\", \"Scy\": \"\\u0421\", \"scy\": \"\\u0441\", \"sdotb\": \"\\u22A1\", \"sdot\": \"\\u22C5\", \"sdote\": \"\\u2A66\", \"searhk\": \"\\u2925\", \"searr\": \"\\u2198\", \"seArr\": \"\\u21D8\", \"searrow\": \"\\u2198\", \"sect\": \"\\u00A7\", \"semi\": \";\", \"seswar\": \"\\u2929\", \"setminus\": \"\\u2216\", \"setmn\": \"\\u2216\", \"sext\": \"\\u2736\", \"Sfr\": \"\\uD835\\uDD16\", \"sfr\": \"\\uD835\\uDD30\", \"sfrown\": \"\\u2322\", \"sharp\": \"\\u266F\", \"SHCHcy\": \"\\u0429\", \"shchcy\": \"\\u0449\", \"SHcy\": \"\\u0428\", \"shcy\": \"\\u0448\", \"ShortDownArrow\": \"\\u2193\", \"ShortLeftArrow\": \"\\u2190\", \"shortmid\": \"\\u2223\", \"shortparallel\": \"\\u2225\", \"ShortRightArrow\": \"\\u2192\", \"ShortUpArrow\": \"\\u2191\", \"shy\": \"\\u00AD\", \"Sigma\": \"\\u03A3\", \"sigma\": \"\\u03C3\", \"sigmaf\": \"\\u03C2\", \"sigmav\": \"\\u03C2\", \"sim\": \"\\u223C\", \"simdot\": \"\\u2A6A\", \"sime\": \"\\u2243\", \"simeq\": \"\\u2243\", \"simg\": \"\\u2A9E\", \"simgE\": \"\\u2AA0\", \"siml\": \"\\u2A9D\", \"simlE\": \"\\u2A9F\", \"simne\": \"\\u2246\", \"simplus\": \"\\u2A24\", \"simrarr\": \"\\u2972\", \"slarr\": \"\\u2190\", \"SmallCircle\": \"\\u2218\", \"smallsetminus\": \"\\u2216\", \"smashp\": \"\\u2A33\", \"smeparsl\": \"\\u29E4\", \"smid\": \"\\u2223\", \"smile\": \"\\u2323\", \"smt\": \"\\u2AAA\", \"smte\": \"\\u2AAC\", \"smtes\": \"\\u2AAC\\uFE00\", \"SOFTcy\": \"\\u042C\", \"softcy\": \"\\u044C\", \"solbar\": \"\\u233F\", \"solb\": \"\\u29C4\", \"sol\": \"/\", \"Sopf\": \"\\uD835\\uDD4A\", \"sopf\": \"\\uD835\\uDD64\", \"spades\": \"\\u2660\", \"spadesuit\": \"\\u2660\", \"spar\": \"\\u2225\", \"sqcap\": \"\\u2293\", \"sqcaps\": \"\\u2293\\uFE00\", \"sqcup\": \"\\u2294\", \"sqcups\": \"\\u2294\\uFE00\", \"Sqrt\": \"\\u221A\", \"sqsub\": \"\\u228F\", \"sqsube\": \"\\u2291\", \"sqsubset\": \"\\u228F\", \"sqsubseteq\": \"\\u2291\", \"sqsup\": \"\\u2290\", \"sqsupe\": \"\\u2292\", \"sqsupset\": \"\\u2290\", \"sqsupseteq\": \"\\u2292\", \"square\": \"\\u25A1\", \"Square\": \"\\u25A1\", \"SquareIntersection\": \"\\u2293\", \"SquareSubset\": \"\\u228F\", \"SquareSubsetEqual\": \"\\u2291\", \"SquareSuperset\": \"\\u2290\", \"SquareSupersetEqual\": \"\\u2292\", \"SquareUnion\": \"\\u2294\", \"squarf\": \"\\u25AA\", \"squ\": \"\\u25A1\", \"squf\": \"\\u25AA\", \"srarr\": \"\\u2192\", \"Sscr\": \"\\uD835\\uDCAE\", \"sscr\": \"\\uD835\\uDCC8\", \"ssetmn\": \"\\u2216\", \"ssmile\": \"\\u2323\", \"sstarf\": \"\\u22C6\", \"Star\": \"\\u22C6\", \"star\": \"\\u2606\", \"starf\": \"\\u2605\", \"straightepsilon\": \"\\u03F5\", \"straightphi\": \"\\u03D5\", \"strns\": \"\\u00AF\", \"sub\": \"\\u2282\", \"Sub\": \"\\u22D0\", \"subdot\": \"\\u2ABD\", \"subE\": \"\\u2AC5\", \"sube\": \"\\u2286\", \"subedot\": \"\\u2AC3\", \"submult\": \"\\u2AC1\", \"subnE\": \"\\u2ACB\", \"subne\": \"\\u228A\", \"subplus\": \"\\u2ABF\", \"subrarr\": \"\\u2979\", \"subset\": \"\\u2282\", \"Subset\": \"\\u22D0\", \"subseteq\": \"\\u2286\", \"subseteqq\": \"\\u2AC5\", \"SubsetEqual\": \"\\u2286\", \"subsetneq\": \"\\u228A\", \"subsetneqq\": \"\\u2ACB\", \"subsim\": \"\\u2AC7\", \"subsub\": \"\\u2AD5\", \"subsup\": \"\\u2AD3\", \"succapprox\": \"\\u2AB8\", \"succ\": \"\\u227B\", \"succcurlyeq\": \"\\u227D\", \"Succeeds\": \"\\u227B\", \"SucceedsEqual\": \"\\u2AB0\", \"SucceedsSlantEqual\": \"\\u227D\", \"SucceedsTilde\": \"\\u227F\", \"succeq\": \"\\u2AB0\", \"succnapprox\": \"\\u2ABA\", \"succneqq\": \"\\u2AB6\", \"succnsim\": \"\\u22E9\", \"succsim\": \"\\u227F\", \"SuchThat\": \"\\u220B\", \"sum\": \"\\u2211\", \"Sum\": \"\\u2211\", \"sung\": \"\\u266A\", \"sup1\": \"\\u00B9\", \"sup2\": \"\\u00B2\", \"sup3\": \"\\u00B3\", \"sup\": \"\\u2283\", \"Sup\": \"\\u22D1\", \"supdot\": \"\\u2ABE\", \"supdsub\": \"\\u2AD8\", \"supE\": \"\\u2AC6\", \"supe\": \"\\u2287\", \"supedot\": \"\\u2AC4\", \"Superset\": \"\\u2283\", \"SupersetEqual\": \"\\u2287\", \"suphsol\": \"\\u27C9\", \"suphsub\": \"\\u2AD7\", \"suplarr\": \"\\u297B\", \"supmult\": \"\\u2AC2\", \"supnE\": \"\\u2ACC\", \"supne\": \"\\u228B\", \"supplus\": \"\\u2AC0\", \"supset\": \"\\u2283\", \"Supset\": \"\\u22D1\", \"supseteq\": \"\\u2287\", \"supseteqq\": \"\\u2AC6\", \"supsetneq\": \"\\u228B\", \"supsetneqq\": \"\\u2ACC\", \"supsim\": \"\\u2AC8\", \"supsub\": \"\\u2AD4\", \"supsup\": \"\\u2AD6\", \"swarhk\": \"\\u2926\", \"swarr\": \"\\u2199\", \"swArr\": \"\\u21D9\", \"swarrow\": \"\\u2199\", \"swnwar\": \"\\u292A\", \"szlig\": \"\\u00DF\", \"Tab\": \"\\t\", \"target\": \"\\u2316\", \"Tau\": \"\\u03A4\", \"tau\": \"\\u03C4\", \"tbrk\": \"\\u23B4\", \"Tcaron\": \"\\u0164\", \"tcaron\": \"\\u0165\", \"Tcedil\": \"\\u0162\", \"tcedil\": \"\\u0163\", \"Tcy\": \"\\u0422\", \"tcy\": \"\\u0442\", \"tdot\": \"\\u20DB\", \"telrec\": \"\\u2315\", \"Tfr\": \"\\uD835\\uDD17\", \"tfr\": \"\\uD835\\uDD31\", \"there4\": \"\\u2234\", \"therefore\": \"\\u2234\", \"Therefore\": \"\\u2234\", \"Theta\": \"\\u0398\", \"theta\": \"\\u03B8\", \"thetasym\": \"\\u03D1\", \"thetav\": \"\\u03D1\", \"thickapprox\": \"\\u2248\", \"thicksim\": \"\\u223C\", \"ThickSpace\": \"\\u205F\\u200A\", \"ThinSpace\": \"\\u2009\", \"thinsp\": \"\\u2009\", \"thkap\": \"\\u2248\", \"thksim\": \"\\u223C\", \"THORN\": \"\\u00DE\", \"thorn\": \"\\u00FE\", \"tilde\": \"\\u02DC\", \"Tilde\": \"\\u223C\", \"TildeEqual\": \"\\u2243\", \"TildeFullEqual\": \"\\u2245\", \"TildeTilde\": \"\\u2248\", \"timesbar\": \"\\u2A31\", \"timesb\": \"\\u22A0\", \"times\": \"\\u00D7\", \"timesd\": \"\\u2A30\", \"tint\": \"\\u222D\", \"toea\": \"\\u2928\", \"topbot\": \"\\u2336\", \"topcir\": \"\\u2AF1\", \"top\": \"\\u22A4\", \"Topf\": \"\\uD835\\uDD4B\", \"topf\": \"\\uD835\\uDD65\", \"topfork\": \"\\u2ADA\", \"tosa\": \"\\u2929\", \"tprime\": \"\\u2034\", \"trade\": \"\\u2122\", \"TRADE\": \"\\u2122\", \"triangle\": \"\\u25B5\", \"triangledown\": \"\\u25BF\", \"triangleleft\": \"\\u25C3\", \"trianglelefteq\": \"\\u22B4\", \"triangleq\": \"\\u225C\", \"triangleright\": \"\\u25B9\", \"trianglerighteq\": \"\\u22B5\", \"tridot\": \"\\u25EC\", \"trie\": \"\\u225C\", \"triminus\": \"\\u2A3A\", \"TripleDot\": \"\\u20DB\", \"triplus\": \"\\u2A39\", \"trisb\": \"\\u29CD\", \"tritime\": \"\\u2A3B\", \"trpezium\": \"\\u23E2\", \"Tscr\": \"\\uD835\\uDCAF\", \"tscr\": \"\\uD835\\uDCC9\", \"TScy\": \"\\u0426\", \"tscy\": \"\\u0446\", \"TSHcy\": \"\\u040B\", \"tshcy\": \"\\u045B\", \"Tstrok\": \"\\u0166\", \"tstrok\": \"\\u0167\", \"twixt\": \"\\u226C\", \"twoheadleftarrow\": \"\\u219E\", \"twoheadrightarrow\": \"\\u21A0\", \"Uacute\": \"\\u00DA\", \"uacute\": \"\\u00FA\", \"uarr\": \"\\u2191\", \"Uarr\": \"\\u219F\", \"uArr\": \"\\u21D1\", \"Uarrocir\": \"\\u2949\", \"Ubrcy\": \"\\u040E\", \"ubrcy\": \"\\u045E\", \"Ubreve\": \"\\u016C\", \"ubreve\": \"\\u016D\", \"Ucirc\": \"\\u00DB\", \"ucirc\": \"\\u00FB\", \"Ucy\": \"\\u0423\", \"ucy\": \"\\u0443\", \"udarr\": \"\\u21C5\", \"Udblac\": \"\\u0170\", \"udblac\": \"\\u0171\", \"udhar\": \"\\u296E\", \"ufisht\": \"\\u297E\", \"Ufr\": \"\\uD835\\uDD18\", \"ufr\": \"\\uD835\\uDD32\", \"Ugrave\": \"\\u00D9\", \"ugrave\": \"\\u00F9\", \"uHar\": \"\\u2963\", \"uharl\": \"\\u21BF\", \"uharr\": \"\\u21BE\", \"uhblk\": \"\\u2580\", \"ulcorn\": \"\\u231C\", \"ulcorner\": \"\\u231C\", \"ulcrop\": \"\\u230F\", \"ultri\": \"\\u25F8\", \"Umacr\": \"\\u016A\", \"umacr\": \"\\u016B\", \"uml\": \"\\u00A8\", \"UnderBar\": \"_\", \"UnderBrace\": \"\\u23DF\", \"UnderBracket\": \"\\u23B5\", \"UnderParenthesis\": \"\\u23DD\", \"Union\": \"\\u22C3\", \"UnionPlus\": \"\\u228E\", \"Uogon\": \"\\u0172\", \"uogon\": \"\\u0173\", \"Uopf\": \"\\uD835\\uDD4C\", \"uopf\": \"\\uD835\\uDD66\", \"UpArrowBar\": \"\\u2912\", \"uparrow\": \"\\u2191\", \"UpArrow\": \"\\u2191\", \"Uparrow\": \"\\u21D1\", \"UpArrowDownArrow\": \"\\u21C5\", \"updownarrow\": \"\\u2195\", \"UpDownArrow\": \"\\u2195\", \"Updownarrow\": \"\\u21D5\", \"UpEquilibrium\": \"\\u296E\", \"upharpoonleft\": \"\\u21BF\", \"upharpoonright\": \"\\u21BE\", \"uplus\": \"\\u228E\", \"UpperLeftArrow\": \"\\u2196\", \"UpperRightArrow\": \"\\u2197\", \"upsi\": \"\\u03C5\", \"Upsi\": \"\\u03D2\", \"upsih\": \"\\u03D2\", \"Upsilon\": \"\\u03A5\", \"upsilon\": \"\\u03C5\", \"UpTeeArrow\": \"\\u21A5\", \"UpTee\": \"\\u22A5\", \"upuparrows\": \"\\u21C8\", \"urcorn\": \"\\u231D\", \"urcorner\": \"\\u231D\", \"urcrop\": \"\\u230E\", \"Uring\": \"\\u016E\", \"uring\": \"\\u016F\", \"urtri\": \"\\u25F9\", \"Uscr\": \"\\uD835\\uDCB0\", \"uscr\": \"\\uD835\\uDCCA\", \"utdot\": \"\\u22F0\", \"Utilde\": \"\\u0168\", \"utilde\": \"\\u0169\", \"utri\": \"\\u25B5\", \"utrif\": \"\\u25B4\", \"uuarr\": \"\\u21C8\", \"Uuml\": \"\\u00DC\", \"uuml\": \"\\u00FC\", \"uwangle\": \"\\u29A7\", \"vangrt\": \"\\u299C\", \"varepsilon\": \"\\u03F5\", \"varkappa\": \"\\u03F0\", \"varnothing\": \"\\u2205\", \"varphi\": \"\\u03D5\", \"varpi\": \"\\u03D6\", \"varpropto\": \"\\u221D\", \"varr\": \"\\u2195\", \"vArr\": \"\\u21D5\", \"varrho\": \"\\u03F1\", \"varsigma\": \"\\u03C2\", \"varsubsetneq\": \"\\u228A\\uFE00\", \"varsubsetneqq\": \"\\u2ACB\\uFE00\", \"varsupsetneq\": \"\\u228B\\uFE00\", \"varsupsetneqq\": \"\\u2ACC\\uFE00\", \"vartheta\": \"\\u03D1\", \"vartriangleleft\": \"\\u22B2\", \"vartriangleright\": \"\\u22B3\", \"vBar\": \"\\u2AE8\", \"Vbar\": \"\\u2AEB\", \"vBarv\": \"\\u2AE9\", \"Vcy\": \"\\u0412\", \"vcy\": \"\\u0432\", \"vdash\": \"\\u22A2\", \"vDash\": \"\\u22A8\", \"Vdash\": \"\\u22A9\", \"VDash\": \"\\u22AB\", \"Vdashl\": \"\\u2AE6\", \"veebar\": \"\\u22BB\", \"vee\": \"\\u2228\", \"Vee\": \"\\u22C1\", \"veeeq\": \"\\u225A\", \"vellip\": \"\\u22EE\", \"verbar\": \"|\", \"Verbar\": \"\\u2016\", \"vert\": \"|\", \"Vert\": \"\\u2016\", \"VerticalBar\": \"\\u2223\", \"VerticalLine\": \"|\", \"VerticalSeparator\": \"\\u2758\", \"VerticalTilde\": \"\\u2240\", \"VeryThinSpace\": \"\\u200A\", \"Vfr\": \"\\uD835\\uDD19\", \"vfr\": \"\\uD835\\uDD33\", \"vltri\": \"\\u22B2\", \"vnsub\": \"\\u2282\\u20D2\", \"vnsup\": \"\\u2283\\u20D2\", \"Vopf\": \"\\uD835\\uDD4D\", \"vopf\": \"\\uD835\\uDD67\", \"vprop\": \"\\u221D\", \"vrtri\": \"\\u22B3\", \"Vscr\": \"\\uD835\\uDCB1\", \"vscr\": \"\\uD835\\uDCCB\", \"vsubnE\": \"\\u2ACB\\uFE00\", \"vsubne\": \"\\u228A\\uFE00\", \"vsupnE\": \"\\u2ACC\\uFE00\", \"vsupne\": \"\\u228B\\uFE00\", \"Vvdash\": \"\\u22AA\", \"vzigzag\": \"\\u299A\", \"Wcirc\": \"\\u0174\", \"wcirc\": \"\\u0175\", \"wedbar\": \"\\u2A5F\", \"wedge\": \"\\u2227\", \"Wedge\": \"\\u22C0\", \"wedgeq\": \"\\u2259\", \"weierp\": \"\\u2118\", \"Wfr\": \"\\uD835\\uDD1A\", \"wfr\": \"\\uD835\\uDD34\", \"Wopf\": \"\\uD835\\uDD4E\", \"wopf\": \"\\uD835\\uDD68\", \"wp\": \"\\u2118\", \"wr\": \"\\u2240\", \"wreath\": \"\\u2240\", \"Wscr\": \"\\uD835\\uDCB2\", \"wscr\": \"\\uD835\\uDCCC\", \"xcap\": \"\\u22C2\", \"xcirc\": \"\\u25EF\", \"xcup\": \"\\u22C3\", \"xdtri\": \"\\u25BD\", \"Xfr\": \"\\uD835\\uDD1B\", \"xfr\": \"\\uD835\\uDD35\", \"xharr\": \"\\u27F7\", \"xhArr\": \"\\u27FA\", \"Xi\": \"\\u039E\", \"xi\": \"\\u03BE\", \"xlarr\": \"\\u27F5\", \"xlArr\": \"\\u27F8\", \"xmap\": \"\\u27FC\", \"xnis\": \"\\u22FB\", \"xodot\": \"\\u2A00\", \"Xopf\": \"\\uD835\\uDD4F\", \"xopf\": \"\\uD835\\uDD69\", \"xoplus\": \"\\u2A01\", \"xotime\": \"\\u2A02\", \"xrarr\": \"\\u27F6\", \"xrArr\": \"\\u27F9\", \"Xscr\": \"\\uD835\\uDCB3\", \"xscr\": \"\\uD835\\uDCCD\", \"xsqcup\": \"\\u2A06\", \"xuplus\": \"\\u2A04\", \"xutri\": \"\\u25B3\", \"xvee\": \"\\u22C1\", \"xwedge\": \"\\u22C0\", \"Yacute\": \"\\u00DD\", \"yacute\": \"\\u00FD\", \"YAcy\": \"\\u042F\", \"yacy\": \"\\u044F\", \"Ycirc\": \"\\u0176\", \"ycirc\": \"\\u0177\", \"Ycy\": \"\\u042B\", \"ycy\": \"\\u044B\", \"yen\": \"\\u00A5\", \"Yfr\": \"\\uD835\\uDD1C\", \"yfr\": \"\\uD835\\uDD36\", \"YIcy\": \"\\u0407\", \"yicy\": \"\\u0457\", \"Yopf\": \"\\uD835\\uDD50\", \"yopf\": \"\\uD835\\uDD6A\", \"Yscr\": \"\\uD835\\uDCB4\", \"yscr\": \"\\uD835\\uDCCE\", \"YUcy\": \"\\u042E\", \"yucy\": \"\\u044E\", \"yuml\": \"\\u00FF\", \"Yuml\": \"\\u0178\", \"Zacute\": \"\\u0179\", \"zacute\": \"\\u017A\", \"Zcaron\": \"\\u017D\", \"zcaron\": \"\\u017E\", \"Zcy\": \"\\u0417\", \"zcy\": \"\\u0437\", \"Zdot\": \"\\u017B\", \"zdot\": \"\\u017C\", \"zeetrf\": \"\\u2128\", \"ZeroWidthSpace\": \"\\u200B\", \"Zeta\": \"\\u0396\", \"zeta\": \"\\u03B6\", \"zfr\": \"\\uD835\\uDD37\", \"Zfr\": \"\\u2128\", \"ZHcy\": \"\\u0416\", \"zhcy\": \"\\u0436\", \"zigrarr\": \"\\u21DD\", \"zopf\": \"\\uD835\\uDD6B\", \"Zopf\": \"\\u2124\", \"Zscr\": \"\\uD835\\uDCB5\", \"zscr\": \"\\uD835\\uDCCF\", \"zwj\": \"\\u200D\", \"zwnj\": \"\\u200C\" };\n\nconst decodeMap: { [codePoint: string]: number } = { \"0\": 65533, \"128\": 8364, \"130\": 8218, \"131\": 402, \"132\": 8222, \"133\": 8230, \"134\": 8224, \"135\": 8225, \"136\": 710, \"137\": 8240, \"138\": 352, \"139\": 8249, \"140\": 338, \"142\": 381, \"145\": 8216, \"146\": 8217, \"147\": 8220, \"148\": 8221, \"149\": 8226, \"150\": 8211, \"151\": 8212, \"152\": 732, \"153\": 8482, \"154\": 353, \"155\": 8250, \"156\": 339, \"158\": 382, \"159\": 376 };\n\nfunction sorter(a: string, b: string) {\n    return a < b ? 1 : -1;\n}\nfunction decodeCodePoint(codePoint: number) {\n\n    if ((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF) {\n        return \"\\uFFFD\";\n    }\n\n    if (codePoint in decodeMap) {\n        // Not sure why decodeMap has strings.\n        codePoint = decodeMap[`${codePoint}`];\n    }\n\n    let output = \"\";\n\n    if (codePoint > 0xFFFF) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);\n        codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    output += String.fromCharCode(codePoint);\n    return output;\n}\n\nfunction getReplacer(map: { [key: string]: string }) {\n    return function (str: string) {\n        if (str.charAt(1) === \"#\") {\n            if (str.charAt(2) === \"X\" || str.charAt(2) === \"x\") {\n                return decodeCodePoint(parseInt(str.substr(3), 16));\n            }\n            return decodeCodePoint(parseInt(str.substr(2), 10));\n        }\n        return map[str.slice(1, -1)];\n    };\n}\n\nconst legacy = Object.keys(legacyMap).sort(sorter);\n\nconst keys = Object.keys(entityMap).sort(sorter);\n\nfor (let i = 0, j = 0; i < keys.length; i++) {\n    if (legacy[j] === keys[i]) {\n        keys[i] += \";?\";\n        j++;\n    }\n    else {\n        keys[i] += \";\";\n    }\n}\n\nconst re = new RegExp(\"&(?:\" + keys.join(\"|\") + \"|#[xX][\\\\da-fA-F]+;?|#\\\\d+;?)\", \"g\");\nconst replace = getReplacer(entityMap);\n\nfunction replacer(str: string) {\n    if (str.substr(-1) !== \";\") str += \";\";\n    return replace(str);\n}\n\n// TODO consider creating a merged map\nexport const decodeHTML = function (str: string) {\n    return String(str).replace(re, replacer);\n};\n","const decodeCache: { [exclude: string]: string[] } = {};\n\nconst defaultChars = ';/?:@&=+$,#';\n\nfunction getDecodeCache(exclude: string) {\n    let cache = decodeCache[exclude];\n    if (cache) { return cache; }\n\n    cache = decodeCache[exclude] = [];\n\n    for (let i = 0; i < 128; i++) {\n        const ch = String.fromCharCode(i);\n        cache.push(ch);\n    }\n\n    for (let i = 0; i < exclude.length; i++) {\n        const ch = exclude.charCodeAt(i);\n        cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n    }\n\n    return cache;\n}\n\nexport function decode(s: string, exclude?: string): string {\n\n    if (typeof exclude !== 'string') {\n        exclude = defaultChars;\n    }\n\n    const cache = getDecodeCache(exclude);\n\n    return s.replace(/(%[a-f0-9]{2})+/gi, function (seq: string) {\n\n        let b2: number;\n        let b3: number;\n        let b4: number;\n        let chr: number;\n        let result = '';\n\n        const l = seq.length;\n        for (let i = 0; i < l; i += 3) {\n            const b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n            if (b1 < 0x80) {\n                result += cache[b1];\n                continue;\n            }\n\n            if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n                // 110xxxxx 10xxxxxx\n                b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n                if ((b2 & 0xC0) === 0x80) {\n                    chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n                    if (chr < 0x80) {\n                        result += '\\ufffd\\ufffd';\n                    } else {\n                        result += String.fromCharCode(chr);\n                    }\n\n                    i += 3;\n                    continue;\n                }\n            }\n\n            if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n                // 1110xxxx 10xxxxxx 10xxxxxx\n                b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n                b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n                if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n                    chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n                    if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n                        result += '\\ufffd\\ufffd\\ufffd';\n                    } else {\n                        result += String.fromCharCode(chr);\n                    }\n\n                    i += 6;\n                    continue;\n                }\n            }\n\n            if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n                // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n                b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n                b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n                b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n                if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n                    chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n                    if (chr < 0x10000 || chr > 0x10FFFF) {\n                        result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n                    } else {\n                        chr -= 0x10000;\n                        result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n                    }\n\n                    i += 9;\n                    continue;\n                }\n            }\n\n            result += '\\ufffd';\n        }\n\n        return result;\n    });\n}\n\nexport function encode(s: string): string {\n    throw new Error(`encode('${s}')`);\n}\n","\n\nconst encodeCache: { [exclude: string]: string[] } = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude: string) {\n    let cache = encodeCache[exclude];\n    if (cache) { return cache; }\n\n    cache = encodeCache[exclude] = [];\n\n    for (let i = 0; i < 128; i++) {\n        const ch = String.fromCharCode(i);\n\n        if (/^[0-9a-z]$/i.test(ch)) {\n            // always allow unencoded alphanumeric characters\n            cache.push(ch);\n        }\n        else {\n            cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n        }\n    }\n\n    for (let i = 0; i < exclude.length; i++) {\n        cache[exclude.charCodeAt(i)] = exclude[i];\n    }\n\n    return cache;\n}\n\n\nconst defaultChars = \";/?:@&=+$,-_.!~*'()#\";\n// const componentChars = \"-_.!~*'()\";\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nexport function encode(s: string, exclude?: string, keepEscaped?: boolean): string {\n    let result = '';\n\n    if (typeof exclude !== 'string') {\n        // encode(string, keepEscaped)\n        keepEscaped = exclude;\n        exclude = defaultChars;\n    }\n\n    if (typeof keepEscaped === 'undefined') {\n        keepEscaped = true;\n    }\n\n    const cache = getEncodeCache(exclude);\n\n    const l = s.length;\n    for (let i = 0; i < l; i++) {\n        const code = s.charCodeAt(i);\n\n        if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n            if (/^[0-9a-f]{2}$/i.test(s.slice(i + 1, i + 3))) {\n                result += s.slice(i, i + 3);\n                i += 2;\n                continue;\n            }\n        }\n\n        if (code < 128) {\n            result += cache[code];\n            continue;\n        }\n\n        if (code >= 0xD800 && code <= 0xDFFF) {\n            if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n                const nextCode = s.charCodeAt(i + 1);\n                if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n                    result += encodeURIComponent(s[i] + s[i + 1]);\n                    i++;\n                    continue;\n                }\n            }\n            result += '%EF%BF%BD';\n            continue;\n        }\n        result += encodeURIComponent(s[i]);\n    }\n    return result;\n}\n","\nexport interface ListData {\n    type?: any;\n    tight?: boolean;\n    bulletChar?: string;\n    start?: number;\n    delimiter?: string;\n    padding?: any;\n    markerOffset?: number;\n}\n\nexport type SourcePos = [[number, number], [number, number]];\n\nexport class Node {\n    private _type: string;\n    private _parent: Node;\n    private _firstChild: Node;\n    private _lastChild: Node;\n    private _prev: Node;\n    private _next: Node;\n    private _sourcepos: SourcePos;\n    public _lastLineBlank: boolean;\n    public open: boolean;\n    public _string_content: string;\n    private _literal: any;\n    public listData: ListData;\n    private _info: any;\n    private _destination: any;\n    private _title: any;\n    public isFenced: boolean;\n    public fenceChar: string;\n    public fenceLength: number;\n    public fenceOffset: number;\n    private _level: number;\n    private _onEnter: any;\n    private _onExit: any;\n    public htmlBlockType: number;\n    constructor(nodeType: string, sourcepos?: SourcePos) {\n        this._type = nodeType;\n        this._parent = null;\n        this._firstChild = null;\n        this._lastChild = null;\n        this._prev = null;\n        this._next = null;\n        this._sourcepos = sourcepos;\n        this._lastLineBlank = false;\n        this.open = true;\n        this._string_content = null;\n        this._literal = null;\n        this.listData = {};\n        this._info = null;\n        this._destination = null;\n        this._title = null;\n        this.isFenced = false;\n        this.fenceChar = null;\n        this.fenceLength = 0;\n        this.fenceOffset = null;\n        this._level = null;\n        this._onEnter = null;\n        this._onExit = null;\n    }\n    get isContainer() {\n        switch (this._type) {\n            case 'document':\n            case 'block_quote':\n            case 'list':\n            case 'item':\n            case 'paragraph':\n            case 'heading':\n            case 'emph':\n            case 'strong':\n            case 'link':\n            case 'image':\n            case 'custom_inline':\n            case 'custom_block':\n                return true;\n            default:\n                return false;\n        }\n    }\n    get type(): string {\n        return this._type;\n    }\n    get firstChild(): Node {\n        return this._firstChild;\n    }\n    get lastChild(): Node {\n        return this._lastChild;\n    }\n    get next(): Node {\n        return this._next;\n    }\n    get prev(): Node {\n        return this._prev;\n    }\n    get parent(): Node {\n        return this._parent;\n    }\n    get sourcepos(): any {\n        return this._sourcepos;\n    }\n    get literal(): string {\n        return this._literal;\n    }\n    set literal(s: string) {\n        this._literal = s;\n    }\n    get destination(): string {\n        return this._destination;\n    }\n    set destination(s: string) {\n        this._destination = s;\n    }\n    get title(): string {\n        return this._title;\n    }\n    set title(s: string) {\n        this._title = s;\n    }\n    get info(): string {\n        return this._info;\n    }\n    set info(s: string) {\n        this._info = s;\n    }\n    get level(): number {\n        return this._level;\n    }\n    set level(s: number) {\n        this._level = s;\n    }\n    get listType(): string {\n        return this.listData.type;\n    }\n    set listType(t: string) {\n        this.listData.type = t;\n    }\n    get listTight(): boolean {\n        return this.listData.tight;\n    }\n    set listTight(tight: boolean) {\n        this.listData.tight = tight;\n    }\n    get listStart(): number {\n        return this.listData.start;\n    }\n    set listStart(start: number) {\n        this.listData.start = start;\n    }\n    get listDelimiter(): string {\n        return this.listData.delimiter;\n    }\n    set listDelimiter(delimiter: string) {\n        this.listData.delimiter = delimiter;\n    }\n    get onEnter(): any {\n        return this._onEnter;\n    }\n    set onEnter(s: any) {\n        this._onEnter = s;\n    }\n    get onExit(): any {\n        return this._onExit;\n    }\n    set onExit(s: any) {\n        this._onExit = s;\n    }\n    unlink() {\n        if (this._prev) {\n            this._prev._next = this._next;\n        } else if (this._parent) {\n            this._parent._firstChild = this._next;\n        }\n        if (this._next) {\n            this._next._prev = this._prev;\n        } else if (this._parent) {\n            this._parent._lastChild = this._prev;\n        }\n        this._parent = null;\n        this._next = null;\n        this._prev = null;\n    }\n    appendChild(child: Node) {\n        child.unlink();\n        child._parent = this;\n        if (this._lastChild) {\n            this._lastChild._next = child;\n            child._prev = this._lastChild;\n            this._lastChild = child;\n        } else {\n            this._firstChild = child;\n            this._lastChild = child;\n        }\n    }\n\n    prependChild(child: Node) {\n        child.unlink();\n        child._parent = this;\n        if (this._firstChild) {\n            this._firstChild._prev = child;\n            child._next = this._firstChild;\n            this._firstChild = child;\n        } else {\n            this._firstChild = child;\n            this._lastChild = child;\n        }\n    }\n\n    insertAfter(sibling: Node) {\n        sibling.unlink();\n        sibling._next = this._next;\n        if (sibling._next) {\n            sibling._next._prev = sibling;\n        }\n        sibling._prev = this;\n        this._next = sibling;\n        sibling._parent = this._parent;\n        if (!sibling._next) {\n            sibling._parent._lastChild = sibling;\n        }\n    }\n\n    insertBefore(sibling: Node) {\n        sibling.unlink();\n        sibling._prev = this._prev;\n        if (sibling._prev) {\n            sibling._prev._next = sibling;\n        }\n        sibling._next = this;\n        this._prev = sibling;\n        sibling._parent = this._parent;\n        if (!sibling._prev) {\n            sibling._parent._firstChild = sibling;\n        }\n    }\n\n    walker() {\n        const walker = new NodeWalker(this);\n        return walker;\n    }\n}\n\nexport interface NodeWalkerEvent {\n    entering: boolean;\n    node: Node;\n}\n\n/* Example of use of walker:\n\n var walker = w.walker();\n var event;\n\n while (event = walker.next()) {\n console.log(event.entering, event.node.type);\n }\n\n */\nexport class NodeWalker {\n    current: Node;\n    root: Node;\n    entering = true;\n    constructor(root: Node) {\n        this.current = root;\n        this.root = root;\n    }\n    next(): NodeWalkerEvent {\n        const cur = this.current;\n        const entering = this.entering;\n\n        if (cur === null) {\n            return null;\n        }\n\n        const container = cur.isContainer;\n\n        if (entering && container) {\n            if (cur.firstChild) {\n                this.current = cur.firstChild;\n                this.entering = true;\n            } else {\n                // stay on node but exit\n                this.entering = false;\n            }\n\n        }\n        else if (cur === this.root) {\n            this.current = null;\n\n        }\n        else if (cur.next === null) {\n            this.current = cur.parent;\n            this.entering = false;\n\n        }\n        else {\n            this.current = cur.next;\n            this.entering = true;\n        }\n\n        return { entering: entering, node: cur };\n    }\n    resumeAt(node: Node, entering: boolean) {\n        this.current = node;\n        this.entering = (entering === true);\n    }\n}\n"],"names":["C_OPEN_BRACKET","C_BACKSLASH","C_NEWLINE","C_LESSTHAN","defaultChars"],"mappings":"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E,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAA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,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO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QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,kBAAkB,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,qBAAqB,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,mBAAmB,EAAE,QAAQ,EAAE,mBAAmB,EAAE,QAAQ,EAAE,mBAAmB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,iBAAiB,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,QAAQ,EAAE,mBAAmB,EAAE,QAAQ,EAAE,qBAAqB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,mBAAmB,EAAE,QAAQ,EAAE,kBAAkB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,kBAAkB,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,gBAAgB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,cAAc,EAAE,qBAAqB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,mBAAmB,EAAE,QAAQ,EAAE,uBAAuB,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,cAAc,EAAE,sBAAsB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,iBAAiB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,kBAAkB,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,sBAAsB,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,eAAe,EAAE,cAAc,EAAE,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,iBAAiB,EAAE,QAAQ,EAAE,qBAAqB,EAAE,cAAc,EAAE,mBAAmB,EAAE,cAAc,EAAE,gBAAgB,EAAE,QAAQ,EAAE,sBAAsB,EAAE,cAAc,EAAE,iBAAiB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,oBAAoB,EAAE,cAAc,EAAE,iBAAiB,EAAE,QAAQ,EAAE,sBAAsB,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,aAAa,EAAE,cAAc,EAAE,mBAAmB,EAAE,cAAc,EAAE,cAAc,EAAE,QAAQ,EAAE,yBAAyB,EAAE,cAAc,EAAE,mBAAmB,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,kBAAkB,EAAE,cAAc,EAAE,uBAAuB,EAAE,QAAQ,EAAE,mBAAmB,EAAE,QAAQ,EAAE,qBAAqB,EAAE,cAAc,EAAE,kBAAkB,EAAE,QAAQ,EAAE,uBAAuB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,cAAc,EAAE,sBAAsB,EAAE,QAAQ,EAAE,mBAAmB,EAAE,cAAc,EAAE,wBAAwB,EAAE,QAAQ,EAAE,WAAW,EAAE,cAAc,EAAE,gBAAgB,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,kBAAkB,EAAE,cAAc,EAAE,uBAAuB,EAAE,QAAQ,EAAE,kBAAkB,EAAE,cAAc,EAAE,aAAa,EAAE,cAAc,EAAE,kBAAkB,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,mBAAmB,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,cAAc,EAAE,OAAO,EAAE,cAAc,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,cAAc,EAAE,aAAa,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,WAAW,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,cAAc,EAAE,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,cAAc,EAAE,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,iBAAiB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,kBAAkB,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,cAAc,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,sBAAsB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,OAAO,EAAE,QA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AAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ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E,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,oBAAoB,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,IAAI,EAAE,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"}